<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="libhandy-1"/>
  <c:include name="handy.h"/>
  <namespace name="Handy"
             version="1"
             shared-library="libhandy-1.so.0"
             c:identifier-prefixes="Hdy"
             c:symbol-prefixes="hdy">
    <class name="ActionRow"
           c:symbol-prefix="action_row"
           c:type="HdyActionRow"
           parent="PreferencesRow"
           glib:type-name="HdyActionRow"
           glib:get-type="hdy_action_row_get_type"
           glib:type-struct="ActionRowClass">
      <source-position filename="../src/hdy-action-row.h" line="40"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_action_row_new"
                   version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="537">Creates a new #HdyActionRow.</doc>
        <source-position filename="../src/hdy-action-row.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-action-row.c"
               line="542">a new #HdyActionRow</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="activate" invoker="activate">
        <source-position filename="../src/hdy-action-row.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="hdy_action_row_activate">
        <source-position filename="../src/hdy-action-row.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_prefix"
              c:identifier="hdy_action_row_add_prefix"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="915">Adds a prefix widget to @self.</doc>
        <source-position filename="../src/hdy-action-row.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="917">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="918">the prefix widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activatable_widget"
              c:identifier="hdy_action_row_get_activatable_widget"
              glib:get-property="activatable-widget"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="660">Gets the widget activated when @self is activated.</doc>
        <source-position filename="../src/hdy-action-row.h" line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-action-row.c"
               line="666">the widget activated when @self is
         activated, or %NULL if none has been set.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="662">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="hdy_action_row_get_icon_name"
              glib:get-property="icon-name"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="603">Gets the icon name for @self.</doc>
        <source-position filename="../src/hdy-action-row.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-action-row.c"
               line="609">the icon name for @self.
The returned string is owned by the #HdyActionRow and should not be freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="605">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="hdy_action_row_get_subtitle"
              glib:get-property="subtitle"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="552">Gets the subtitle for @self.</doc>
        <source-position filename="../src/hdy-action-row.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-action-row.c"
               line="558">the subtitle for @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="554">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle_lines"
              c:identifier="hdy_action_row_get_subtitle_lines"
              glib:get-property="subtitle-lines"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="857">Gets the number of lines at the end of which the subtitle label will be
ellipsized.
If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="../src/hdy-action-row.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-action-row.c"
               line="865">the number of lines at the end of which the subtitle label will be
         ellipsized.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="859">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_lines"
              c:identifier="hdy_action_row_get_title_lines"
              glib:get-property="title-lines"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="799">Gets the number of lines at the end of which the title label will be
ellipsized.
If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="../src/hdy-action-row.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-action-row.c"
               line="807">the number of lines at the end of which the title label will be
         ellipsized.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="801">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="hdy_action_row_get_use_underline"
              glib:get-property="use-underline"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="740">Gets whether an embedded underline in the text of the title and subtitle
labels indicates a mnemonic. See hdy_action_row_set_use_underline().</doc>
        <source-position filename="../src/hdy-action-row.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-action-row.c"
               line="747">%TRUE if an embedded underline in the title and subtitle labels
         indicates the mnemonic accelerator keys.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="742">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_activatable_widget"
              c:identifier="hdy_action_row_set_activatable_widget"
              glib:set-property="activatable-widget"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="695">Sets the widget to activate when @self is activated, either by clicking
on it, by calling hdy_action_row_activate(), or via mnemonics in the title or
the subtitle. See the “use_underline” property to enable mnemonics.

The target widget will be activated by emitting the
GtkWidget::mnemonic-activate signal on it.</doc>
        <source-position filename="../src/hdy-action-row.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="697">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="698">the target #GtkWidget, or %NULL to unset</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="hdy_action_row_set_icon_name"
              glib:set-property="icon-name"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="629">Sets the icon name for @self.</doc>
        <source-position filename="../src/hdy-action-row.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="631">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="632">the icon name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="hdy_action_row_set_subtitle"
              glib:set-property="subtitle"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="574">Sets the subtitle for @self.</doc>
        <source-position filename="../src/hdy-action-row.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="576">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="577">the subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle_lines"
              c:identifier="hdy_action_row_set_subtitle_lines"
              glib:set-property="subtitle-lines"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="882">Sets the number of lines at the end of which the subtitle label will be
ellipsized.
If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="../src/hdy-action-row.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="884">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="subtitle_lines" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="885">the number of lines at the end of which the subtitle label will be ellipsized</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title_lines"
              c:identifier="hdy_action_row_set_title_lines"
              glib:set-property="title-lines"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="824">Sets the number of lines at the end of which the title label will be
ellipsized.
If the value is 0, the number of lines won't be limited.</doc>
        <source-position filename="../src/hdy-action-row.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="826">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="title_lines" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="827">the number of lines at the end of which the title label will be ellipsized</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="hdy_action_row_set_use_underline"
              glib:set-property="use-underline"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="764">If true, an underline in the text of the title and subtitle labels indicates
the next character should be used for the mnemonic accelerator key.</doc>
        <source-position filename="../src/hdy-action-row.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="766">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-action-row.c"
                 line="767">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="activatable-widget"
                version="0.0.7"
                writable="1"
                transfer-ownership="none"
                setter="set_activatable_widget"
                getter="get_activatable_widget">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="375">The activatable widget for this row.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="icon-name"
                version="0.0.6"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="361">The icon name for this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                version="0.0.6"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="389">The subtitle for this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle-lines"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle_lines"
                getter="get_subtitle_lines">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="434">The number of lines at the end of which the subtitle label will be
ellipsized.
Set this property to 0 if you don't want to limit the number of lines.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="title-lines"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_title_lines"
                getter="get_title_lines">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="418">The number of lines at the end of which the title label will be ellipsized.
Set this property to 0 if you don't want to limit the number of lines.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="use-underline"
                version="0.0.6"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="403">Whether an embedded underline in the text of the title and subtitle labels
indicates a mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesRow" c:type="HdyPreferencesRow"/>
      </field>
      <glib:signal name="activated" when="last" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.c"
             line="453">This signal is emitted after the row has been activated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ActionRowClass"
            c:type="HdyActionRowClass"
            glib:is-gtype-struct-for="ActionRow">
      <source-position filename="../src/hdy-action-row.h" line="40"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-action-row.h"
             line="26">The parent class</doc>
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <source-position filename="../src/hdy-action-row.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ActionRow" c:type="HdyActionRow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ApplicationWindow"
           c:symbol-prefix="application_window"
           c:type="HdyApplicationWindow"
           parent="Gtk.ApplicationWindow"
           glib:type-name="HdyApplicationWindow"
           glib:get-type="hdy_application_window_get_type"
           glib:type-struct="ApplicationWindowClass">
      <source-position filename="../src/hdy-application-window.h" line="30"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_application_window_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-application-window.c"
             line="136">Creates a new #HdyApplicationWindow.</doc>
        <source-position filename="../src/hdy-application-window.h" line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-application-window.c"
               line="141">a newly created #HdyApplicationWindow</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow"/>
      </field>
    </class>
    <record name="ApplicationWindowClass"
            c:type="HdyApplicationWindowClass"
            glib:is-gtype-struct-for="ApplicationWindow">
      <source-position filename="../src/hdy-application-window.h" line="30"/>
      <field name="parent_class">
        <type name="Gtk.ApplicationWindowClass"
              c:type="GtkApplicationWindowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Avatar"
           c:symbol-prefix="avatar"
           c:type="HdyAvatar"
           parent="Gtk.DrawingArea"
           glib:type-name="HdyAvatar"
           glib:get-type="hdy_avatar_get_type"
           glib:type-struct="AvatarClass">
      <source-position filename="../src/hdy-avatar.h" line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_avatar_new">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="945">Creates a new #HdyAvatar.</doc>
        <source-position filename="../src/hdy-avatar.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="955">the newly created #HdyAvatar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="947">The size of the avatar</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="948">The text used to generate the color and initials if
@show_initials is %TRUE. The color is selected at random if @text is empty.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="show_initials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="950">whether to show the initials or the fallback icon on
top of the color generated based on @text.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="draw_to_pixbuf"
              c:identifier="hdy_avatar_draw_to_pixbuf"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1197">Renders @self into a pixbuf at @size and @scale_factor. This can be used to export the fallback avatar.</doc>
        <source-position filename="../src/hdy-avatar.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="1205">the pixbuf.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1199">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1200">The size of the pixbuf</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="scale_factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1201">The scale factor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_to_pixbuf_async"
              c:identifier="hdy_avatar_draw_to_pixbuf_async"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1257">Renders asynchronously @self into a pixbuf at @size and @scale_factor.
This can be used to export the fallback avatar.</doc>
        <source-position filename="../src/hdy-avatar.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1259">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1260">The size of the pixbuf</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="scale_factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1261">The scale factor</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1262">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1263">a #GAsyncReadyCallback to call when the avatar is generated</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1264">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="draw_to_pixbuf_finish"
              c:identifier="hdy_avatar_draw_to_pixbuf_finish"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1308">Finishes an asynchronous draw of an avatar to a pixbuf.</doc>
        <source-position filename="../src/hdy-avatar.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="1315">a #GdkPixbuf</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1310">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="async_result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1311">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="hdy_avatar_get_icon_name"
              glib:get-property="icon-name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="969">Gets the name of the icon in the icon theme to use when the icon should be
displayed.</doc>
        <source-position filename="../src/hdy-avatar.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="976">the name of the icon from the icon theme.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="971">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loadable_icon"
              c:identifier="hdy_avatar_get_loadable_icon"
              glib:get-property="loadable-icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1362">Gets the #GLoadableIcon set via hdy_avatar_set_loadable_icon().</doc>
        <source-position filename="../src/hdy-avatar.h" line="91"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="1368">the #GLoadableIcon</doc>
          <type name="Gio.LoadableIcon" c:type="GLoadableIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1364">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_initials"
              c:identifier="hdy_avatar_get_show_initials"
              glib:get-property="show-initials">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1065">Returns whether initials are used for the fallback or the icon.</doc>
        <source-position filename="../src/hdy-avatar.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="1071">%TRUE if the initials are used for the fallback.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1067">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="hdy_avatar_get_size"
              glib:get-property="size">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1158">Returns the size of the avatar.</doc>
        <source-position filename="../src/hdy-avatar.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="1164">the size of the avatar.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1160">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="hdy_avatar_get_text"
              glib:get-property="text">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1021">Get the text used to generate the fallback initials and color</doc>
        <source-position filename="../src/hdy-avatar.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.c"
               line="1027">returns the text used to generate
the fallback initials. This is the internal string used by
the #HdyAvatar, and must not be modified.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1023">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="hdy_avatar_set_icon_name"
              glib:set-property="icon-name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="988">Sets the name of the icon in the icon theme to use when the icon should be
displayed.
If no name is set, the avatar-default-symbolic icon will be used.
If the name doesn't match a valid icon, it is an error and no icon will be
displayed.
If the icon theme is changed, the image will be updated automatically.</doc>
        <source-position filename="../src/hdy-avatar.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="990">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="991">the name of the icon from the icon theme</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image_load_func"
              c:identifier="hdy_avatar_set_image_load_func"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1104">A callback which is called when the custom image need to be reloaded for some
reason (e.g. scale-factor changes).</doc>
        <doc-deprecated xml:space="preserve">use hdy_avatar_set_loadable_icon() instead.</doc-deprecated>
        <source-position filename="../src/hdy-avatar.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1106">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="load_image"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1107">callback to set a custom image</doc>
            <type name="AvatarImageLoadFunc" c:type="HdyAvatarImageLoadFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1108">user data passed to @load_image</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1109">destroy notifier for @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loadable_icon"
              c:identifier="hdy_avatar_set_loadable_icon"
              glib:set-property="loadable-icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1380">Sets the #GLoadableIcon to use as an avatar.
The previous avatar is displayed till the new avatar is loaded,
to immediately remove the custom avatar set the loadable-icon to %NULL.

The #GLoadableIcon set via this function is prefered over a set #HdyAvatarImageLoadFunc.</doc>
        <source-position filename="../src/hdy-avatar.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1382">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1383">a #GLoadableIcon</doc>
            <type name="Gio.LoadableIcon" c:type="GLoadableIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_initials"
              c:identifier="hdy_avatar_set_show_initials"
              glib:set-property="show-initials">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1081">Sets whether the initials should be shown on the fallback avatar or the icon.</doc>
        <source-position filename="../src/hdy-avatar.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1083">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="show_initials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1084">whether the initials should be shown on the fallback avatar
or the icon.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="hdy_avatar_set_size"
              glib:set-property="size">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1174">Sets the size of the avatar.</doc>
        <source-position filename="../src/hdy-avatar.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1176">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1177">The size to be used for the avatar</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="hdy_avatar_set_text"
              glib:set-property="text">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="1039">Set the text used to generate the fallback initials color</doc>
        <source-position filename="../src/hdy-avatar.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1041">a #HdyAvatar</doc>
            <type name="Avatar" c:type="HdyAvatar*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-avatar.c"
                 line="1042">the text used to get the initials and color</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="875">The name of the icon in the icon theme to use when the icon should be
displayed.
If no name is set, the avatar-default-symbolic icon will be used.
If the name doesn't match a valid icon, it is an error and no icon will be
displayed.
If the icon theme is changed, the image will be updated automatically.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="loadable-icon"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_loadable_icon"
                getter="get_loadable_icon">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="919">A #GLoadableIcon used to load the avatar.</doc>
        <type name="Gio.LoadableIcon"/>
      </property>
      <property name="show-initials"
                writable="1"
                transfer-ownership="none"
                setter="set_show_initials"
                getter="get_show_initials">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="863">The avatar size of the avatar.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                setter="set_text"
                getter="get_text">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.c"
             line="894">The text used for the initials and for generating the color.
If #HdyAvatar:show-initials is %FALSE it's only used to generate the color.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AvatarClass"
            c:type="HdyAvatarClass"
            glib:is-gtype-struct-for="Avatar">
      <source-position filename="../src/hdy-avatar.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <callback name="AvatarImageLoadFunc"
              c:type="HdyAvatarImageLoadFunc"
              deprecated="1"
              deprecated-version="1.2">
      <doc xml:space="preserve"
           filename="../src/hdy-avatar.h"
           line="25">The returned #GdkPixbuf is expected to be square with width and height set
to @size. The image is cropped to a circle without any scaling or transformation.</doc>
      <doc-deprecated xml:space="preserve">use hdy_avatar_set_loadable_icon() instead.</doc-deprecated>
      <source-position filename="../src/hdy-avatar.h" line="39"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="../src/hdy-avatar.h"
             line="33">the #GdkPixbuf to use as a custom avatar
or %NULL to fallback to the generated avatar.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.h"
               line="27">the required size of the avatar</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="../src/hdy-avatar.h"
               line="28">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Carousel"
           c:symbol-prefix="carousel"
           c:type="HdyCarousel"
           parent="Gtk.EventBox"
           glib:type-name="HdyCarousel"
           glib:get-type="hdy_carousel_get_type"
           glib:type-struct="CarouselClass">
      <source-position filename="../src/hdy-carousel.h" line="22"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Swipeable"/>
      <constructor name="new" c:identifier="hdy_carousel_new" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="791">Create a new #HdyCarousel widget.</doc>
        <source-position filename="../src/hdy-carousel.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="796">The newly created #HdyCarousel widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_allow_long_swipes"
              c:identifier="hdy_carousel_get_allow_long_swipes"
              glib:get-property="allow-long-swipes"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1164">Whether to allow swiping for more than one page at a time. If the value is
%FALSE, each swipe can only move to the adjacent pages.</doc>
        <source-position filename="../src/hdy-carousel.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="1171">%TRUE if long swipes are allowed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1166">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_mouse_drag"
              c:identifier="hdy_carousel_get_allow_mouse_drag"
              glib:get-property="allow-mouse-drag"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1076">Sets whether @self can be dragged with mouse pointer</doc>
        <source-position filename="../src/hdy-carousel.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="1082">%TRUE if @self can be dragged with mouse</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1078">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_scroll_wheel"
              c:identifier="hdy_carousel_get_allow_scroll_wheel"
              glib:get-property="allow-scroll-wheel"
              version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1120">Gets whether @self will respond to scroll wheel events.</doc>
        <source-position filename="../src/hdy-carousel.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="1126">%TRUE if @self will respond to scroll wheel events</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1122">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_animation_duration"
              c:identifier="hdy_carousel_get_animation_duration"
              glib:get-property="animation-duration"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1035">Gets animation duration used by hdy_carousel_scroll_to().</doc>
        <source-position filename="../src/hdy-carousel.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="1041">Animation duration in milliseconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1037">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interactive"
              c:identifier="hdy_carousel_get_interactive"
              glib:get-property="interactive"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="955">Gets whether @self can be navigated.</doc>
        <source-position filename="../src/hdy-carousel.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="961">%TRUE if @self can be swiped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="957">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pages"
              c:identifier="hdy_carousel_get_n_pages"
              glib:get-property="n-pages"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="919">Gets the number of pages in @self.</doc>
        <source-position filename="../src/hdy-carousel.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="925">The number of pages in @self</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="921">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="hdy_carousel_get_position"
              glib:get-property="position"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="937">Gets current scroll position in @self. It's unitless, 1 matches 1 page.</doc>
        <source-position filename="../src/hdy-carousel.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="943">The scroll position</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="939">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_duration"
              c:identifier="hdy_carousel_get_reveal_duration"
              glib:get-property="reveal-duration"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1209">Gets duration of the animation used when adding or removing pages in
milliseconds.</doc>
        <source-position filename="../src/hdy-carousel.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="1216">Page reveal duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1211">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spacing"
              c:identifier="hdy_carousel_get_spacing"
              glib:get-property="spacing"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="999">Gets spacing between pages in pixels.</doc>
        <source-position filename="../src/hdy-carousel.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel.c"
               line="1005">Spacing between pages</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1001">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="hdy_carousel_insert" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="824">Inserts @child into @self at position @position.

If position is -1, or larger than the number of pages,
@child will be appended to the end.</doc>
        <source-position filename="../src/hdy-carousel.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="826">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="827">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="828">the position to insert @child in.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="hdy_carousel_prepend" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="806">Prepends @child to @self</doc>
        <source-position filename="../src/hdy-carousel.h" line="28"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="808">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="809">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder" c:identifier="hdy_carousel_reorder" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="846">Moves @child into position @position.

If position is -1, or larger than the number of pages, @child will be moved
to the end.</doc>
        <source-position filename="../src/hdy-carousel.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="848">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="849">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="850">the position to move @child to.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to"
              c:identifier="hdy_carousel_scroll_to"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="870">Scrolls to @widget position with an animation.
#HdyCarousel:animation-duration property can be used for controlling the
duration.</doc>
        <source-position filename="../src/hdy-carousel.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="872">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="873">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_full"
              c:identifier="hdy_carousel_scroll_to_full"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="890">Scrolls to @widget position with an animation.</doc>
        <source-position filename="../src/hdy-carousel.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="892">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="893">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="894">animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_long_swipes"
              c:identifier="hdy_carousel_set_allow_long_swipes"
              glib:set-property="allow-long-swipes"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1183">Sets whether to allow swiping for more than one page at a time. If the value
is %FALSE, each swipe can only move to the adjacent pages.</doc>
        <source-position filename="../src/hdy-carousel.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1185">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="allow_long_swipes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1186">whether to allow long swipes</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_mouse_drag"
              c:identifier="hdy_carousel_set_allow_mouse_drag"
              glib:set-property="allow-mouse-drag"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1094">Sets whether @self can be dragged with mouse pointer. If @allow_mouse_drag
is %FALSE, dragging is only available on touch.</doc>
        <source-position filename="../src/hdy-carousel.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1096">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="allow_mouse_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1097">whether @self can be dragged with mouse pointer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_scroll_wheel"
              c:identifier="hdy_carousel_set_allow_scroll_wheel"
              glib:set-property="allow-scroll-wheel"
              version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1138">Sets whether @self will respond to scroll wheel events. If the value is
%FALSE, wheel events will be ignored.</doc>
        <source-position filename="../src/hdy-carousel.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1140">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="allow_scroll_wheel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1141">whether @self will respond to scroll wheel events.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_animation_duration"
              c:identifier="hdy_carousel_set_animation_duration"
              glib:set-property="animation-duration"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1053">Sets animation duration used by hdy_carousel_scroll_to().</doc>
        <source-position filename="../src/hdy-carousel.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1055">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1056">animation duration in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interactive"
              c:identifier="hdy_carousel_set_interactive"
              glib:set-property="interactive"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="973">Sets whether @self can be navigated. This can be used to temporarily disable
a #HdyCarousel to only allow swiping in a certain state.</doc>
        <source-position filename="../src/hdy-carousel.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="975">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="976">whether @self can be swiped.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_duration"
              c:identifier="hdy_carousel_set_reveal_duration"
              glib:set-property="reveal-duration"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1228">Sets duration of the animation used when adding or removing pages in
milliseconds.</doc>
        <source-position filename="../src/hdy-carousel.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1230">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="reveal_duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1231">the new reveal duration value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="hdy_carousel_set_spacing"
              glib:set-property="spacing"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="1017">Sets spacing between pages in pixels.</doc>
        <source-position filename="../src/hdy-carousel.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1019">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="1020">the new spacing value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-long-swipes"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_long_swipes"
                getter="get_allow_long_swipes">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="698">Whether to allow swiping for more than one page at a time. If the value is
%FALSE, each swipe can only move to the adjacent pages.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-mouse-drag"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_mouse_drag"
                getter="get_allow_mouse_drag">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="668">Sets whether the #HdyCarousel can be dragged with mouse pointer. If the
value is %FALSE, dragging is only available on touch.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-scroll-wheel"
                version="1.4"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_scroll_wheel"
                getter="get_allow_scroll_wheel">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="683">Whether the widget will respond to scroll wheel events. If the value is
%FALSE, wheel events will be ignored.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="animation-duration"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_animation_duration"
                getter="get_animation_duration">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="654">Animation duration in milliseconds, used by hdy_carousel_scroll_to().</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="interactive"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_interactive"
                getter="get_interactive">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="623">Whether the carousel can be navigated. This can be used to temporarily
disable a #HdyCarousel to only allow navigating it in a certain state.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-pages"
                version="1.0"
                transfer-ownership="none"
                getter="get_n_pages">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="590">The number of pages in a #HdyCarousel</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="position"
                version="1.0"
                transfer-ownership="none"
                getter="get_position">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="606">Current scrolling position, unitless. 1 matches 1 page. Use
hdy_carousel_scroll_to() for changing it.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="reveal-duration"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_duration"
                getter="get_reveal_duration">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="713">Page reveal duration in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="spacing"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_spacing"
                getter="get_spacing">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="638">Spacing between pages in pixels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="page-changed" when="last" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel.c"
             line="735">This signal is emitted after a page has been changed. This can be used to
implement "infinite scrolling" by connecting to this signal and amending
the pages.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel.c"
                 line="738">Current page</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CarouselClass"
            c:type="HdyCarouselClass"
            glib:is-gtype-struct-for="Carousel">
      <source-position filename="../src/hdy-carousel.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <class name="CarouselIndicatorDots"
           c:symbol-prefix="carousel_indicator_dots"
           c:type="HdyCarouselIndicatorDots"
           parent="Gtk.DrawingArea"
           glib:type-name="HdyCarouselIndicatorDots"
           glib:get-type="hdy_carousel_indicator_dots_get_type"
           glib:type-struct="CarouselIndicatorDotsClass">
      <source-position filename="../src/hdy-carousel-indicator-dots.h"
                       line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="hdy_carousel_indicator_dots_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-dots.c"
             line="411">Create a new #HdyCarouselIndicatorDots widget.</doc>
        <source-position filename="../src/hdy-carousel-indicator-dots.h"
                         line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel-indicator-dots.c"
               line="416">The newly created #HdyCarouselIndicatorDots widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_carousel"
              c:identifier="hdy_carousel_indicator_dots_get_carousel"
              glib:get-property="carousel"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-dots.c"
             line="426">Get the #HdyCarousel the indicator uses.

See: hdy_carousel_indicator_dots_set_carousel()</doc>
        <source-position filename="../src/hdy-carousel-indicator-dots.h"
                         line="29"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel-indicator-dots.c"
               line="434">the #HdyCarousel, or %NULL if none has been set</doc>
          <type name="Carousel" c:type="HdyCarousel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel-indicator-dots.c"
                 line="428">a #HdyCarouselIndicatorDots</doc>
            <type name="CarouselIndicatorDots"
                  c:type="HdyCarouselIndicatorDots*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_carousel"
              c:identifier="hdy_carousel_indicator_dots_set_carousel"
              glib:set-property="carousel"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-dots.c"
             line="447">Sets the #HdyCarousel to use.</doc>
        <source-position filename="../src/hdy-carousel-indicator-dots.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel-indicator-dots.c"
                 line="449">a #HdyCarouselIndicatorDots</doc>
            <type name="CarouselIndicatorDots"
                  c:type="HdyCarouselIndicatorDots*"/>
          </instance-parameter>
          <parameter name="carousel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel-indicator-dots.c"
                 line="450">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="carousel"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_carousel"
                getter="get_carousel">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-dots.c"
             line="383">The #HdyCarousel the indicator uses.</doc>
        <type name="Carousel"/>
      </property>
    </class>
    <record name="CarouselIndicatorDotsClass"
            c:type="HdyCarouselIndicatorDotsClass"
            glib:is-gtype-struct-for="CarouselIndicatorDots">
      <source-position filename="../src/hdy-carousel-indicator-dots.h"
                       line="23"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <class name="CarouselIndicatorLines"
           c:symbol-prefix="carousel_indicator_lines"
           c:type="HdyCarouselIndicatorLines"
           parent="Gtk.DrawingArea"
           glib:type-name="HdyCarouselIndicatorLines"
           glib:get-type="hdy_carousel_indicator_lines_get_type"
           glib:type-struct="CarouselIndicatorLinesClass">
      <source-position filename="../src/hdy-carousel-indicator-lines.h"
                       line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="hdy_carousel_indicator_lines_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-lines.c"
             line="410">Create a new #HdyCarouselIndicatorLines widget.</doc>
        <source-position filename="../src/hdy-carousel-indicator-lines.h"
                         line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel-indicator-lines.c"
               line="415">The newly created #HdyCarouselIndicatorLines widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_carousel"
              c:identifier="hdy_carousel_indicator_lines_get_carousel"
              glib:get-property="carousel"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-lines.c"
             line="425">Get the #HdyCarousel the indicator uses.

See: hdy_carousel_indicator_lines_set_carousel()</doc>
        <source-position filename="../src/hdy-carousel-indicator-lines.h"
                         line="29"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-carousel-indicator-lines.c"
               line="433">the #HdyCarousel, or %NULL if none has been set</doc>
          <type name="Carousel" c:type="HdyCarousel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel-indicator-lines.c"
                 line="427">a #HdyCarouselIndicatorLines</doc>
            <type name="CarouselIndicatorLines"
                  c:type="HdyCarouselIndicatorLines*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_carousel"
              c:identifier="hdy_carousel_indicator_lines_set_carousel"
              glib:set-property="carousel"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-lines.c"
             line="446">Sets the #HdyCarousel to use.</doc>
        <source-position filename="../src/hdy-carousel-indicator-lines.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel-indicator-lines.c"
                 line="448">a #HdyCarouselIndicatorLines</doc>
            <type name="CarouselIndicatorLines"
                  c:type="HdyCarouselIndicatorLines*"/>
          </instance-parameter>
          <parameter name="carousel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-carousel-indicator-lines.c"
                 line="449">a #HdyCarousel</doc>
            <type name="Carousel" c:type="HdyCarousel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="carousel"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_carousel"
                getter="get_carousel">
        <doc xml:space="preserve"
             filename="../src/hdy-carousel-indicator-lines.c"
             line="382">The #HdyCarousel the indicator uses.</doc>
        <type name="Carousel"/>
      </property>
    </class>
    <record name="CarouselIndicatorLinesClass"
            c:type="HdyCarouselIndicatorLinesClass"
            glib:is-gtype-struct-for="CarouselIndicatorLines">
      <source-position filename="../src/hdy-carousel-indicator-lines.h"
                       line="23"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <enumeration name="CenteringPolicy"
                 glib:type-name="HdyCenteringPolicy"
                 glib:get-type="hdy_centering_policy_get_type"
                 c:type="HdyCenteringPolicy">
      <member name="loose"
              value="0"
              c:identifier="HDY_CENTERING_POLICY_LOOSE"
              glib:nick="loose"
              glib:name="HDY_CENTERING_POLICY_LOOSE">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="65">Keep the title centered when possible</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="HDY_CENTERING_POLICY_STRICT"
              glib:nick="strict"
              glib:name="HDY_CENTERING_POLICY_STRICT">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="66">Keep the title centered at all cost</doc>
      </member>
    </enumeration>
    <class name="Clamp"
           c:symbol-prefix="clamp"
           c:type="HdyClamp"
           parent="Gtk.Bin"
           glib:type-name="HdyClamp"
           glib:get-type="hdy_clamp_get_type"
           glib:type-struct="ClampClass">
      <source-position filename="../src/hdy-clamp.h" line="22"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="hdy_clamp_new" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-clamp.c"
             line="475">Creates a new #HdyClamp.</doc>
        <source-position filename="../src/hdy-clamp.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-clamp.c"
               line="480">a new #HdyClamp</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_maximum_size"
              c:identifier="hdy_clamp_get_maximum_size"
              glib:get-property="maximum-size"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-clamp.c"
             line="490">Gets the maximum size to allocate to the contained child. It is the width if
@self is horizontal, or the height if it is vertical.</doc>
        <source-position filename="../src/hdy-clamp.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-clamp.c"
               line="497">the maximum size to allocate to the contained child.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-clamp.c"
                 line="492">a #HdyClamp</doc>
            <type name="Clamp" c:type="HdyClamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tightening_threshold"
              c:identifier="hdy_clamp_get_tightening_threshold"
              glib:get-property="tightening-threshold"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-clamp.c"
             line="535">Gets the size starting from which the clamp will tighten its grip on the
child.</doc>
        <source-position filename="../src/hdy-clamp.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-clamp.c"
               line="542">the size starting from which the clamp will tighten its grip on the
child.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-clamp.c"
                 line="537">a #HdyClamp</doc>
            <type name="Clamp" c:type="HdyClamp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_maximum_size"
              c:identifier="hdy_clamp_set_maximum_size"
              glib:set-property="maximum-size"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-clamp.c"
             line="509">Sets the maximum size to allocate to the contained child. It is the width if
@self is horizontal, or the height if it is vertical.</doc>
        <source-position filename="../src/hdy-clamp.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-clamp.c"
                 line="511">a #HdyClamp</doc>
            <type name="Clamp" c:type="HdyClamp*"/>
          </instance-parameter>
          <parameter name="maximum_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-clamp.c"
                 line="512">the maximum size</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tightening_threshold"
              c:identifier="hdy_clamp_set_tightening_threshold"
              glib:set-property="tightening-threshold"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-clamp.c"
             line="555">Sets the size starting from which the clamp will tighten its grip on the
child.</doc>
        <source-position filename="../src/hdy-clamp.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-clamp.c"
                 line="557">a #HdyClamp</doc>
            <type name="Clamp" c:type="HdyClamp*"/>
          </instance-parameter>
          <parameter name="tightening_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-clamp.c"
                 line="558">the tightening threshold</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="maximum-size"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_size"
                getter="get_maximum_size">
        <doc xml:space="preserve"
             filename="../src/hdy-clamp.c"
             line="423">The maximum size to allocate to the child. It is the width if the clamp is
horizontal, or the height if it is vertical.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tightening-threshold"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_tightening_threshold"
                getter="get_tightening_threshold">
        <doc xml:space="preserve"
             filename="../src/hdy-clamp.c"
             line="438">The size starting from which the clamp will tighten its grip on the child,
slowly allocating less and less of the available size up to the maximum
allocated size. Below that threshold and below the maximum width, the child
will be allocated all the available size.

If the threshold is greater than the maximum size to allocate to the child,
the child will be allocated all the width up to the maximum.
If the threshold is lower than the minimum size to allocate to the child,
that size will be used as the tightening threshold.

Effectively, tightening the grip on the child before it reaches its maximum
size makes transitions to and from the maximum size smoother when resizing.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ClampClass"
            c:type="HdyClampClass"
            glib:is-gtype-struct-for="Clamp">
      <source-position filename="../src/hdy-clamp.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <enumeration name="ColorScheme"
                 version="1.6"
                 glib:type-name="HdyColorScheme"
                 glib:get-type="hdy_color_scheme_get_type"
                 c:type="HdyColorScheme">
      <doc xml:space="preserve"
           filename="../src/hdy-style-manager.c"
           line="19">Application color schemes for #HdyStyleManager:color-scheme.</doc>
      <member name="default"
              value="0"
              c:identifier="HDY_COLOR_SCHEME_DEFAULT"
              glib:nick="default"
              glib:name="HDY_COLOR_SCHEME_DEFAULT">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="21">Inherit the parent color-scheme. When set on the
  #HdyStyleManager returned by hdy_style_manager_get_default(), it's
  equivalent to %HDY_COLOR_SCHEME_FORCE_LIGHT.</doc>
      </member>
      <member name="force_light"
              value="1"
              c:identifier="HDY_COLOR_SCHEME_FORCE_LIGHT"
              glib:nick="force-light"
              glib:name="HDY_COLOR_SCHEME_FORCE_LIGHT">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="24">Always use light appearance.</doc>
      </member>
      <member name="prefer_light"
              value="2"
              c:identifier="HDY_COLOR_SCHEME_PREFER_LIGHT"
              glib:nick="prefer-light"
              glib:name="HDY_COLOR_SCHEME_PREFER_LIGHT">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="25">Use light appearance unless the system
  prefers dark colors.</doc>
      </member>
      <member name="prefer_dark"
              value="3"
              c:identifier="HDY_COLOR_SCHEME_PREFER_DARK"
              glib:nick="prefer-dark"
              glib:name="HDY_COLOR_SCHEME_PREFER_DARK">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="27">Use dark appearance unless the system prefers
  light colors.</doc>
      </member>
      <member name="force_dark"
              value="4"
              c:identifier="HDY_COLOR_SCHEME_FORCE_DARK"
              glib:nick="force-dark"
              glib:name="HDY_COLOR_SCHEME_FORCE_DARK">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="29">Always use dark appearance.</doc>
      </member>
    </enumeration>
    <class name="ComboRow"
           c:symbol-prefix="combo_row"
           c:type="HdyComboRow"
           parent="ActionRow"
           glib:type-name="HdyComboRow"
           glib:get-type="hdy_combo_row_get_type"
           glib:type-struct="ComboRowClass">
      <source-position filename="../src/hdy-combo-row.h" line="62"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_combo_row_new" version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="470">Creates a new #HdyComboRow.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.c"
               line="475">a new #HdyComboRow</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="bind_model"
              c:identifier="hdy_combo_row_bind_model"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="507">Binds @model to @self.

If @self was already bound to a model, that previous binding is destroyed.

The contents of @self are cleared and then filled with widgets that represent
items from @model. @self is updated whenever @model changes. If @model is
%NULL, @self is left empty.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="509">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="510">the #GListModel to be bound to @self</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
          <parameter name="create_list_widget_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="511">a function that creates
  widgets for items to display in the list, or %NULL in case you also passed
  %NULL as @model</doc>
            <type name="Gtk.ListBoxCreateWidgetFunc"
                  c:type="GtkListBoxCreateWidgetFunc"/>
          </parameter>
          <parameter name="create_current_widget_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="514">a function that creates
  widgets for items to display as the selected item, or %NULL in case you
  also passed %NULL as @model</doc>
            <type name="Gtk.ListBoxCreateWidgetFunc"
                  c:type="GtkListBoxCreateWidgetFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="517">user data passed to @create_list_widget_func and
  @create_current_widget_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="519">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_name_model"
              c:identifier="hdy_combo_row_bind_name_model"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="579">Binds @model to @self.

If @self was already bound to a model, that previous binding is destroyed.

The contents of @self are cleared and then filled with widgets that represent
items from @model. @self is updated whenever @model changes. If @model is
%NULL, @self is left empty.

This is more convenient to use than hdy_combo_row_bind_model() if you want to
represent items of the model with names.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="581">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="582">the #GListModel to be bound to @self</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
          <parameter name="get_name_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="583">a function that creates names for items, or %NULL
  in case you also passed %NULL as @model</doc>
            <type name="ComboRowGetNameFunc" c:type="HdyComboRowGetNameFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="585">user data passed to @get_name_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="586">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="hdy_combo_row_get_model"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="485">Gets the model bound to @self, or %NULL if none is bound.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.c"
               line="491">the #GListModel bound to @self or %NULL</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="487">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_index"
              c:identifier="hdy_combo_row_get_selected_index"
              glib:get-property="selected-index"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="673">Gets the index of the selected item in its #GListModel.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.c"
               line="679">the index of the selected item, or -1 if no item is selected</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="675">a #GtkListBoxRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_subtitle"
              c:identifier="hdy_combo_row_get_use_subtitle"
              glib:get-property="use-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="727">Gets whether the current value of @self should be displayed as its subtitle.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.c"
               line="733">whether the current value of @self should be displayed as its subtitle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="729">a #GtkListBoxRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_for_enum"
              c:identifier="hdy_combo_row_set_for_enum"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="622">Creates a model for @enum_type and binds it to @self. The items of the model
will be #HdyEnumValueObject objects.

If @self was already bound to a model, that previous binding is destroyed.

The contents of @self are cleared and then filled with widgets that represent
items from @model. @self is updated whenever @model changes. If @model is
%NULL, @self is left empty.

This is more convenient to use than hdy_combo_row_bind_name_model() if you
want to represent values of an enumeration with names.

See hdy_enum_value_row_name().</doc>
        <source-position filename="../src/hdy-combo-row.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="624">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="enum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="625">the enumeration #GType to be bound to @self</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="get_name_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="626">a function that creates names for items, or %NULL
  in case you also passed %NULL as @model</doc>
            <type name="ComboRowGetEnumValueNameFunc"
                  c:type="HdyComboRowGetEnumValueNameFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="628">user data passed to @get_name_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="629">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_get_name_func"
              c:identifier="hdy_combo_row_set_get_name_func"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="783">Sets a closure to convert items into names. See HdyComboRow:use-subtitle.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="785">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="get_name_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="786">a function that creates names for items, or %NULL
  in case you also passed %NULL as @model</doc>
            <type name="ComboRowGetNameFunc" c:type="HdyComboRowGetNameFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="788">user data passed to @get_name_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="789">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_index"
              c:identifier="hdy_combo_row_set_selected_index"
              glib:set-property="selected-index"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="695">Sets the index of the selected item in its #GListModel.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="697">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="selected_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="698">the index of the selected item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_subtitle"
              c:identifier="hdy_combo_row_set_use_subtitle"
              glib:set-property="use-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="749">Sets whether the current value of @self should be displayed as its subtitle.

If %TRUE, you should not access HdyActionRow:subtitle.</doc>
        <source-position filename="../src/hdy-combo-row.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="751">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="use_subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-combo-row.c"
                 line="752">%TRUE to set the current value as the subtitle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="selected-index"
                version="0.0.7"
                writable="1"
                transfer-ownership="none"
                setter="set_selected_index"
                getter="get_selected_index">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="410">The index of the selected item in its #GListModel.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="use-subtitle"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_use_subtitle"
                getter="get_use_subtitle">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="424">%TRUE to set the current value as the subtitle.

If you use a custom widget creation function, you will need to give the row
a name conversion closure with hdy_combo_row_set_get_name_func().

If %TRUE, you should not access HdyActionRow:subtitle.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="ActionRow" c:type="HdyActionRow"/>
      </field>
    </class>
    <record name="ComboRowClass"
            c:type="HdyComboRowClass"
            glib:is-gtype-struct-for="ComboRow">
      <source-position filename="../src/hdy-combo-row.h" line="62"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.h"
             line="54">The parent class</doc>
        <type name="ActionRowClass" c:type="HdyActionRowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="ComboRowGetEnumValueNameFunc"
              c:type="HdyComboRowGetEnumValueNameFunc">
      <doc xml:space="preserve"
           filename="../src/hdy-combo-row.h"
           line="39">Called for combo rows that are bound to an enumeration with
hdy_combo_row_set_for_enum() for each value from that enumeration.</doc>
      <source-position filename="../src/hdy-combo-row.h" line="49"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.h"
             line="47">a newly allocated displayable name that represents @value</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.h"
               line="41">the value from the enum from which to get a name</doc>
          <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.h"
               line="42">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ComboRowGetNameFunc" c:type="HdyComboRowGetNameFunc">
      <doc xml:space="preserve"
           filename="../src/hdy-combo-row.h"
           line="26">Called for combo rows that are bound to a #GListModel with
hdy_combo_row_bind_name_model() for each item that gets added to the model.</doc>
      <source-position filename="../src/hdy-combo-row.h" line="36"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.h"
             line="34">a newly allocated displayable name that represents @item</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="item" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.h"
               line="28">the item from the model from which to get a name</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.h"
               line="29">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Deck"
           c:symbol-prefix="deck"
           c:type="HdyDeck"
           parent="Gtk.Container"
           glib:type-name="HdyDeck"
           glib:get-type="hdy_deck_get_type"
           glib:type-struct="DeckClass">
      <source-position filename="../src/hdy-deck.h" line="41"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Swipeable"/>
      <constructor name="new" c:identifier="hdy_deck_new">
        <source-position filename="../src/hdy-deck.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_adjacent_child"
              c:identifier="hdy_deck_get_adjacent_child"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="470">Gets the previous or next child, or %NULL if it doesn't exist. This will be
the same widget hdy_deck_navigate() will navigate to.</doc>
        <source-position filename="../src/hdy-deck.h" line="92"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="478">the previous or next child, or
  %NULL if it doesn't exist.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="472">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="473">the direction</doc>
            <type name="NavigationDirection" c:type="HdyNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_can_swipe_back"
              c:identifier="hdy_deck_get_can_swipe_back"
              glib:get-property="can-swipe-back"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="415">Returns whether the #HdyDeck allows swiping to the previous child.</doc>
        <source-position filename="../src/hdy-deck.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="421">%TRUE if back swipe is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="417">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_swipe_forward"
              c:identifier="hdy_deck_get_can_swipe_forward"
              glib:get-property="can-swipe-forward"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="452">Returns whether the #HdyDeck allows swiping to the next child.</doc>
        <source-position filename="../src/hdy-deck.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="458">%TRUE if forward swipe is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="454">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_by_name"
              c:identifier="hdy_deck_get_child_by_name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="513">Finds the child of @self with the name given as the argument. Returns %NULL
if there is no child with this name.</doc>
        <source-position filename="../src/hdy-deck.h" line="99"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="521">the requested child of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="515">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="516">the name of the child to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="hdy_deck_get_homogeneous"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="122">Gets whether @self is homogeneous for the given orientation.
See hdy_deck_set_homogeneous().</doc>
        <source-position filename="../src/hdy-deck.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="130">whether @self is homogeneous for the given orientation.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="124">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="125">the orientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="hdy_deck_get_interpolate_size"
              glib:get-property="interpolate-size"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="377">Returns whether the #HdyDeck is set up to interpolate between
the sizes of children on page switch.</doc>
        <source-position filename="../src/hdy-deck.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="384">%TRUE if child sizes are interpolated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="379">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="hdy_deck_get_transition_duration"
              glib:get-property="transition-duration"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="221">Returns the amount of time (in milliseconds) that
transitions between children in @self will take.</doc>
        <source-position filename="../src/hdy-deck.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="228">the child transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="223">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_running"
              c:identifier="hdy_deck_get_transition_running"
              glib:get-property="transition-running"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="336">Returns whether @self is currently in a transition from one page to
another.</doc>
        <source-position filename="../src/hdy-deck.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="343">%TRUE if the transition is currently running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="338">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="hdy_deck_get_transition_type"
              glib:get-property="transition-type"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="143">Gets the type of animation that will be used
for transitions between children in @self.</doc>
        <source-position filename="../src/hdy-deck.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="150">the current transition type of @self</doc>
          <type name="DeckTransitionType" c:type="HdyDeckTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="145">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="hdy_deck_get_visible_child"
              glib:get-property="visible-child"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="259">Gets the visible child widget.</doc>
        <source-position filename="../src/hdy-deck.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="265">the visible child widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="261">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child_name"
              c:identifier="hdy_deck_get_visible_child_name"
              glib:get-property="visible-child-name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="298">Gets the name of the currently visible child widget.</doc>
        <source-position filename="../src/hdy-deck.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="304">the name of the visible child</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="300">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_child_after"
              c:identifier="hdy_deck_insert_child_after"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="554">Inserts @child in the position after @sibling in the list of children.
If @sibling is %NULL, insert @child at the first position.</doc>
        <source-position filename="../src/hdy-deck.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="556">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="557">the #GtkWidget to insert</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="558">the sibling after which to insert @child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="navigate" c:identifier="hdy_deck_navigate" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="492">Switches to the previous or next child, similar to performing a swipe
gesture to go in @direction.</doc>
        <source-position filename="../src/hdy-deck.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-deck.c"
               line="500">%TRUE if visible child was changed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="494">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="495">the direction</doc>
            <type name="NavigationDirection" c:type="HdyNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="hdy_deck_prepend" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="534">Inserts @child at the first position in @self.</doc>
        <source-position filename="../src/hdy-deck.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="536">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="537">the #GtkWidget to prepend</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child_after"
              c:identifier="hdy_deck_reorder_child_after"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="580">Moves @child to the position after @sibling in the list of children.
If @sibling is %NULL, move @child to the first position.</doc>
        <source-position filename="../src/hdy-deck.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="582">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="583">the #GtkWidget to move, must be a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="584">the sibling to move @child after, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_swipe_back"
              c:identifier="hdy_deck_set_can_swipe_back"
              glib:set-property="can-swipe-back"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="396">Sets whether or not @self allows switching to the previous child via a swipe
gesture.</doc>
        <source-position filename="../src/hdy-deck.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="398">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="can_swipe_back" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="399">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_swipe_forward"
              c:identifier="hdy_deck_set_can_swipe_forward"
              glib:set-property="can-swipe-forward"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="433">Sets whether or not @self allows switching to the next child via a swipe
gesture.</doc>
        <source-position filename="../src/hdy-deck.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="435">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="can_swipe_forward" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="436">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="hdy_deck_set_homogeneous"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="98">Sets the #HdyDeck to be homogeneous or not for the given orientation.
If it is homogeneous, the #HdyDeck will request the same
width or height for all its children depending on the orientation.
If it isn't, the deck may change width or height when a different child
becomes visible.</doc>
        <source-position filename="../src/hdy-deck.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="100">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="101">the orientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="102">%TRUE to make @self homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="hdy_deck_set_interpolate_size"
              glib:set-property="interpolate-size"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="355">Sets whether or not @self will interpolate its size when
changing the visible child. If the #HdyDeck:interpolate-size
property is set to %TRUE, @self will interpolate its size between
the current one and the one it'll take after changing the
visible child, according to the set transition duration.</doc>
        <source-position filename="../src/hdy-deck.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="357">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="358">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="hdy_deck_set_transition_duration"
              glib:set-property="transition-duration"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="240">Sets the duration that transitions between children in @self
will take.</doc>
        <source-position filename="../src/hdy-deck.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="242">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="243">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="hdy_deck_set_transition_type"
              glib:set-property="transition-type"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="178">Sets the type of animation that will be used for transitions between children
in @self.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the child that is about to become
current.</doc>
        <source-position filename="../src/hdy-deck.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="180">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="181">the new transition type</doc>
            <type name="DeckTransitionType" c:type="HdyDeckTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child"
              c:identifier="hdy_deck_set_visible_child"
              glib:set-property="visible-child"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="277">Makes @visible_child visible using a transition determined by
HdyDeck:transition-type and HdyDeck:transition-duration. The transition can
be cancelled by the user, in which case visible child will change back to
the previously visible child.</doc>
        <source-position filename="../src/hdy-deck.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="279">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="visible_child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="280">the new child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child_name"
              c:identifier="hdy_deck_set_visible_child_name"
              glib:set-property="visible-child-name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="316">Makes the child with the name @name visible.

See hdy_deck_set_visible_child() for more details.</doc>
        <source-position filename="../src/hdy-deck.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="318">a #HdyDeck</doc>
            <type name="Deck" c:type="HdyDeck*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-deck.c"
                 line="319">the name of a child</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-swipe-back"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_swipe_back"
                getter="get_can_swipe_back">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="1058">Whether or not the deck allows switching to the previous child via a swipe
gesture.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-swipe-forward"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_swipe_forward"
                getter="get_can_swipe_forward">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="1073">Whether or not the deck allows switching to the next child via a swipe
gesture.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hhomogeneous"
                version="1.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="940">Horizontally homogeneous sizing.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="1043">Whether or not the size should smoothly change when changing between
differently sized children.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-duration"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="1015">The transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-running"
                version="1.0"
                transfer-ownership="none"
                getter="get_transition_running">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="1029">Whether or not the transition is currently running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="996">The type of animation that will be used for transitions between
children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the child that is about
to become current.</doc>
        <type name="DeckTransitionType"/>
      </property>
      <property name="vhomogeneous"
                version="1.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="954">Vertically homogeneous sizing.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible-child"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child"
                getter="get_visible_child">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="968">The widget currently visible.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="visible-child-name"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child_name"
                getter="get_visible_child_name">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="982">The name of the widget currently visible.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="DeckClass"
            c:type="HdyDeckClass"
            glib:is-gtype-struct-for="Deck">
      <source-position filename="../src/hdy-deck.h" line="41"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.h"
             line="33">The parent class</doc>
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DeckTransitionType"
                 version="1.0"
                 glib:type-name="HdyDeckTransitionType"
                 glib:get-type="hdy_deck_transition_type_get_type"
                 c:type="HdyDeckTransitionType">
      <doc xml:space="preserve"
           filename="../src/hdy-deck.c"
           line="43">This enumeration value describes the possible transitions between children
in a #HdyDeck widget.

New values may be added to this enumeration over time.</doc>
      <member name="over"
              value="0"
              c:identifier="HDY_DECK_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="HDY_DECK_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="45">Cover the old page or uncover the new page, sliding from or towards the end according to orientation, text direction and children order</doc>
      </member>
      <member name="under"
              value="1"
              c:identifier="HDY_DECK_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="HDY_DECK_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="46">Uncover the new page or cover the old page, sliding from or towards the start according to orientation, text direction and children order</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="HDY_DECK_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="HDY_DECK_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="../src/hdy-deck.c"
             line="47">Slide from left, right, up or down according to the orientation, text direction and the children order</doc>
      </member>
    </enumeration>
    <class name="EnumValueObject"
           c:symbol-prefix="enum_value_object"
           c:type="HdyEnumValueObject"
           parent="GObject.Object"
           glib:type-name="HdyEnumValueObject"
           glib:get-type="hdy_enum_value_object_get_type"
           glib:type-struct="EnumValueObjectClass">
      <source-position filename="../src/hdy-enum-value-object.h" line="23"/>
      <constructor name="new" c:identifier="hdy_enum_value_object_new">
        <source-position filename="../src/hdy-enum-value-object.h" line="26"/>
        <return-value transfer-ownership="full">
          <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="enum_value" transfer-ownership="none">
            <type name="GObject.EnumValue" c:type="GEnumValue*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_name" c:identifier="hdy_enum_value_object_get_name">
        <source-position filename="../src/hdy-enum-value-object.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nick" c:identifier="hdy_enum_value_object_get_nick">
        <source-position filename="../src/hdy-enum-value-object.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="hdy_enum_value_object_get_value">
        <source-position filename="../src/hdy-enum-value-object.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="EnumValueObjectClass"
            c:type="HdyEnumValueObjectClass"
            glib:is-gtype-struct-for="EnumValueObject">
      <source-position filename="../src/hdy-enum-value-object.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ExpanderRow"
           c:symbol-prefix="expander_row"
           c:type="HdyExpanderRow"
           parent="PreferencesRow"
           glib:type-name="HdyExpanderRow"
           glib:get-type="hdy_expander_row_get_type"
           glib:type-struct="ExpanderRowClass">
      <source-position filename="../src/hdy-expander-row.h" line="35"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_expander_row_new"
                   version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="422">Creates a new #HdyExpanderRow.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-expander-row.c"
               line="427">a new #HdyExpanderRow</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_action"
              c:identifier="hdy_expander_row_add_action"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="710">Adds an action widget to @self.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="712">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="713">the action widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_prefix"
              c:identifier="hdy_expander_row_add_prefix"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="734">Adds a prefix widget to @self.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="736">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="737">the prefix widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enable_expansion"
              c:identifier="hdy_expander_row_get_enable_expansion"
              glib:get-property="enable-expansion"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="606">Gets whether the expansion of @self is enabled.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-expander-row.c"
               line="612">whether the expansion of @self is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="608">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded"
              c:identifier="hdy_expander_row_get_expanded"
              glib:get-property="expanded">
        <source-position filename="../src/hdy-expander-row.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="hdy_expander_row_get_icon_name"
              glib:get-property="icon-name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="528">Gets the icon name for @self.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-expander-row.c"
               line="534">the icon name for @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="530">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_enable_switch"
              c:identifier="hdy_expander_row_get_show_enable_switch"
              glib:get-property="show-enable-switch"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="659">Gets whether the switch enabling the expansion of @self is visible.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-expander-row.c"
               line="665">whether the switch enabling the expansion of @self is visible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="661">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="hdy_expander_row_get_subtitle"
              glib:get-property="subtitle"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="437">Gets the subtitle for @self.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-expander-row.c"
               line="443">the subtitle for @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="439">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="hdy_expander_row_get_use_underline"
              glib:get-property="use-underline"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="481">Gets whether an embedded underline in the text of the title and subtitle
labels indicates a mnemonic. See hdy_expander_row_set_use_underline().</doc>
        <source-position filename="../src/hdy-expander-row.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-expander-row.c"
               line="488">%TRUE if an embedded underline in the title and subtitle labels
         indicates the mnemonic accelerator keys.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="483">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enable_expansion"
              c:identifier="hdy_expander_row_set_enable_expansion"
              glib:set-property="enable-expansion"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="628">Sets whether the expansion of @self is enabled.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="630">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="enable_expansion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="631">%TRUE to enable the expansion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expanded"
              c:identifier="hdy_expander_row_set_expanded"
              glib:set-property="expanded">
        <source-position filename="../src/hdy-expander-row.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="expanded" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="hdy_expander_row_set_icon_name"
              glib:set-property="icon-name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="550">Sets the icon name for @self.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="552">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="553">the icon name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_enable_switch"
              c:identifier="hdy_expander_row_set_show_enable_switch"
              glib:set-property="show-enable-switch"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="681">Sets whether the switch enabling the expansion of @self is visible.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="683">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="show_enable_switch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="684">%TRUE to show the switch enabling the expansion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="hdy_expander_row_set_subtitle"
              glib:set-property="subtitle"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="459">Sets the subtitle for @self.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="461">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="462">the subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="hdy_expander_row_set_use_underline"
              glib:set-property="use-underline"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="505">If true, an underline in the text of the title and subtitle labels indicates
the next character should be used for the mnemonic accelerator key.</doc>
        <source-position filename="../src/hdy-expander-row.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="507">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-expander-row.c"
                 line="508">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enable-expansion"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_expansion"
                getter="get_enable_expansion">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="331">%TRUE if the expansion is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expanded"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded"
                getter="get_expanded">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="319">%TRUE if the row is expanded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="305">The icon name for this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="show-enable-switch"
                writable="1"
                transfer-ownership="none"
                setter="set_show_enable_switch"
                getter="get_show_enable_switch">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="343">%TRUE if the switch enabling the expansion is visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="subtitle"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="276">The subtitle for this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-underline"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.c"
             line="290">Whether an embedded underline in the text of the title and subtitle labels
indicates a mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesRow" c:type="HdyPreferencesRow"/>
      </field>
    </class>
    <record name="ExpanderRowClass"
            c:type="HdyExpanderRowClass"
            glib:is-gtype-struct-for="ExpanderRow">
      <source-position filename="../src/hdy-expander-row.h" line="35"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-expander-row.h"
             line="27">The parent class</doc>
        <type name="PreferencesRowClass" c:type="HdyPreferencesRowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Flap"
           c:symbol-prefix="flap"
           c:type="HdyFlap"
           parent="Gtk.Container"
           glib:type-name="HdyFlap"
           glib:get-type="hdy_flap_get_type"
           glib:type-struct="FlapClass">
      <source-position filename="../src/hdy-flap.h" line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Swipeable"/>
      <constructor name="new" c:identifier="hdy_flap_new" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2011">Creates a new #HdyFlap.</doc>
        <source-position filename="../src/hdy-flap.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2016">a new #HdyFlap</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_content"
              c:identifier="hdy_flap_get_content"
              glib:get-property="content"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2026">Gets the content widget for @self</doc>
        <source-position filename="../src/hdy-flap.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2032">the content widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2028">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flap"
              c:identifier="hdy_flap_get_flap"
              glib:get-property="flap"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2077">Gets the flap widget for @self</doc>
        <source-position filename="../src/hdy-flap.h" line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2083">the flap widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2079">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flap_position"
              c:identifier="hdy_flap_get_flap_position"
              glib:get-property="flap-position"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2181">Gets the flap position for @self.</doc>
        <source-position filename="../src/hdy-flap.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2187">the flap position for @self</doc>
          <type name="Gtk.PackType" c:type="GtkPackType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2183">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_duration"
              c:identifier="hdy_flap_get_fold_duration"
              glib:get-property="fold-duration"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2385">Returns the amount of time (in milliseconds) that fold transitions in @self
will take.</doc>
        <source-position filename="../src/hdy-flap.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2392">the fold transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2387">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold_policy"
              c:identifier="hdy_flap_get_fold_policy"
              glib:get-property="fold-policy"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2325">Gets the current fold policy of @self. See hdy_flap_set_fold_policy().</doc>
        <source-position filename="../src/hdy-flap.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2331">the current fold policy of @self</doc>
          <type name="FlapFoldPolicy" c:type="HdyFlapFoldPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2327">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="hdy_flap_get_folded"
              glib:get-property="folded"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2427">Gets whether @self is currently folded.

See #HdyFlap:fold-policy.</doc>
        <source-position filename="../src/hdy-flap.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2435">%TRUE if @self is currently folded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2429">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_locked"
              c:identifier="hdy_flap_get_locked"
              glib:get-property="locked"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2447">Gets whether @self is locked.</doc>
        <source-position filename="../src/hdy-flap.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2453">%TRUE if @self is locked, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2449">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modal"
              c:identifier="hdy_flap_get_modal"
              glib:get-property="modal"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2547">Gets whether the @self is modal. See hdy_flap_set_modal().</doc>
        <source-position filename="../src/hdy-flap.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2553">%TRUE if @self is modal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2549">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_duration"
              c:identifier="hdy_flap_get_reveal_duration"
              glib:get-property="reveal-duration"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2264">Returns the amount of time (in milliseconds) that reveal transitions in @self
will take.</doc>
        <source-position filename="../src/hdy-flap.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2271">the reveal transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2266">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_flap"
              c:identifier="hdy_flap_get_reveal_flap"
              glib:get-property="reveal-flap"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2228">Gets whether the flap widget is revealed for @self.</doc>
        <source-position filename="../src/hdy-flap.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2234">%TRUE if the flap widget is revealed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2230">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal_progress"
              c:identifier="hdy_flap_get_reveal_progress"
              glib:get-property="reveal-progress"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2306">Gets the current reveal transition progress for @self. 0 means fully hidden,
1 means fully revealed. See #HdyFlap:reveal-flap.</doc>
        <source-position filename="../src/hdy-flap.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2313">the current reveal progress for @self</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2308">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_separator"
              c:identifier="hdy_flap_get_separator"
              glib:get-property="separator"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2129">Gets the separator widget for @self.</doc>
        <source-position filename="../src/hdy-flap.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2135">the separator widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2131">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipe_to_close"
              c:identifier="hdy_flap_get_swipe_to_close"
              glib:get-property="swipe-to-close"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2648">Gets whether @self can be closed with a swipe gesture.</doc>
        <source-position filename="../src/hdy-flap.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2654">%TRUE if @self can be closed with a swipe gesture</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2650">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipe_to_open"
              c:identifier="hdy_flap_get_swipe_to_open"
              glib:get-property="swipe-to-open"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2601">Gets whether @self can be opened with a swipe gesture.</doc>
        <source-position filename="../src/hdy-flap.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2607">%TRUE if @self can be opened with a swipe gesture</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2603">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="hdy_flap_get_transition_type"
              glib:get-property="transition-type"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2494">Gets the type of animation that will be used for reveal and fold transitions
in @self.</doc>
        <source-position filename="../src/hdy-flap.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-flap.c"
               line="2501">the current transition type of @self</doc>
          <type name="FlapTransitionType" c:type="HdyFlapTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2496">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="hdy_flap_set_content"
              glib:set-property="content"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2044">Sets the content widget for @self, always displayed when unfolded, and
partially visible when folded.</doc>
        <source-position filename="../src/hdy-flap.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2046">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2047">the content widget, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flap"
              c:identifier="hdy_flap_set_flap"
              glib:set-property="flap"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2095">Sets the flap widget for @self, only visible when #HdyFlap:reveal-progress is
greater than 0.</doc>
        <source-position filename="../src/hdy-flap.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2097">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="flap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2098">the flap widget, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flap_position"
              c:identifier="hdy_flap_set_flap_position"
              glib:set-property="flap-position"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2199">Sets the flap position for @self. If @GTK_PACK_START, the flap is displayed
before the content, if @GTK_PACK_END, it's displayed after the content.</doc>
        <source-position filename="../src/hdy-flap.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2201">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2202">the new value</doc>
            <type name="Gtk.PackType" c:type="GtkPackType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_duration"
              c:identifier="hdy_flap_set_fold_duration"
              glib:set-property="fold-duration"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2404">Sets the duration that fold transitions in @self will take.</doc>
        <source-position filename="../src/hdy-flap.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2406">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2407">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fold_policy"
              c:identifier="hdy_flap_set_fold_policy"
              glib:set-property="fold-policy"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2343">Sets the current fold policy for @self. See #HdyFlapFoldPolicy for available
policies.</doc>
        <source-position filename="../src/hdy-flap.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2345">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2346">Fold policy</doc>
            <type name="FlapFoldPolicy" c:type="HdyFlapFoldPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locked"
              c:identifier="hdy_flap_set_locked"
              glib:set-property="locked"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2465">Sets whether @self is locked.

If %FALSE, folding @self when the flap is revealed automatically closes it,
and unfolding it when the flap is not revealed opens it. If %TRUE,
#HdyFlap:reveal-flap value never changes on its own.</doc>
        <source-position filename="../src/hdy-flap.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2467">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="locked" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2468">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modal"
              c:identifier="hdy_flap_set_modal"
              glib:set-property="modal"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2565">Sets whether the @self can be closed with a click.

If @modal is %TRUE, clicking the content widget while flap is revealed, or
pressing Escape key, will close the flap. If %FALSE, clicks are passed
through to the content widget.</doc>
        <source-position filename="../src/hdy-flap.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2567">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="modal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2568">Whether @self can be closed with a click</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_duration"
              c:identifier="hdy_flap_set_reveal_duration"
              glib:set-property="reveal-duration"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2283">Sets the duration that reveal transitions in @self will take.</doc>
        <source-position filename="../src/hdy-flap.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2285">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2286">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal_flap"
              c:identifier="hdy_flap_set_reveal_flap"
              glib:set-property="reveal-flap"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2246">Sets whether the flap widget is revealed for @self.</doc>
        <source-position filename="../src/hdy-flap.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2248">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="reveal_flap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2249">%TRUE to reveal the flap widget, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_separator"
              c:identifier="hdy_flap_set_separator"
              glib:set-property="separator"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2147">Sets the separator widget for @self, displayed between content and flap when
there's no shadow to display. When exactly it's visible depends on the
#HdyFlap:transition-type value. If %NULL, no separator will be used.</doc>
        <source-position filename="../src/hdy-flap.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2149">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="separator"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2150">the separator widget, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swipe_to_close"
              c:identifier="hdy_flap_set_swipe_to_close"
              glib:set-property="swipe-to-close"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2666">Sets whether @self can be closed with a swipe gesture.

The area that can be swiped depends on the #HdyFlap:transition-type value.</doc>
        <source-position filename="../src/hdy-flap.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2668">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="swipe_to_close" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2669">Whether @self can be closed with a swipe gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swipe_to_open"
              c:identifier="hdy_flap_set_swipe_to_open"
              glib:set-property="swipe-to-open"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2619">Sets whether @self can be opened with a swipe gesture.

The area that can be swiped depends on the #HdyFlap:transition-type value.</doc>
        <source-position filename="../src/hdy-flap.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2621">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="swipe_to_open" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2622">Whether @self can be opened with a swipe gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="hdy_flap_set_transition_type"
              glib:set-property="transition-type"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="2513">Sets the type of animation that will be used for reveal and fold transitions
in @self.

#HdyFlap:flap is transparent by default, which means the content will be seen
through it with %HDY_FLAP_TRANSITION_TYPE_OVER transitions; add the
.background style class to it if this is unwanted.</doc>
        <source-position filename="../src/hdy-flap.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2515">a #HdyFlap</doc>
            <type name="Flap" c:type="HdyFlap*"/>
          </instance-parameter>
          <parameter name="transition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-flap.c"
                 line="2516">the new transition type</doc>
            <type name="FlapTransitionType" c:type="HdyFlapTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <property name="content"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_content"
                getter="get_content">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1517">The content widget, always displayed when unfolded, and partially visible
when folded.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="flap"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_flap"
                getter="get_flap">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1532">The flap widget, only visible when #HdyFlap:reveal-progress is greater than
0.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="flap-position"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_flap_position"
                getter="get_flap_position">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1563">The flap position for @self. If @GTK_PACK_START, the flap is displayed
before the content, if @GTK_PACK_END, it's displayed after the content.</doc>
        <type name="Gtk.PackType"/>
      </property>
      <property name="fold-duration"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_duration"
                getter="get_fold_duration">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1639">The fold transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="fold-policy"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_fold_policy"
                getter="get_fold_policy">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1623">The current fold policy. See #HdyFlapFoldPolicy for available
policies.</doc>
        <type name="FlapFoldPolicy"/>
      </property>
      <property name="folded"
                version="1.2"
                transfer-ownership="none"
                getter="get_folded">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1654">Whether the flap is currently folded.

See #HdyFlap:fold-policy.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="locked"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_locked"
                getter="get_locked">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1670">Whether the flap is locked.

If %FALSE, folding when the flap is revealed automatically closes it, and
unfolding it when the flap is not revealed opens it. If %TRUE,
#HdyFlap:reveal-flap value never changes on its own.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="modal"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_modal"
                getter="get_modal">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1708">Whether the flap is modal.

If %TRUE, clicking the content widget while flap is revealed, as well as
pressing Escape key, will close the flap. If %FALSE, clicks are passed
through to the content widget.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reveal-duration"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_duration"
                getter="get_reveal_duration">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1593">The reveal transition animation duration, in milliseconds.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="reveal-flap"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal_flap"
                getter="get_reveal_flap">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1579">Whether the flap widget is revealed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reveal-progress"
                version="1.2"
                transfer-ownership="none"
                getter="get_reveal_progress">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1608">The current reveal transition progress. 0 means fully hidden, 1 means fully
revealed See #HdyFlap:reveal-flap.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="separator"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_separator"
                getter="get_separator">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1547">The separator widget, displayed between content and flap when there's no
shadow to display. When exactly it's visible depends on the
#HdyFlap:transition-type value. If %NULL, no separator will be used.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="swipe-to-close"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_swipe_to_close"
                getter="get_swipe_to_close">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1742">Whether the flap can be closed with a swipe gesture.

The area that can be swiped depends on the #HdyFlap:transition-type value.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="swipe-to-open"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_swipe_to_open"
                getter="get_swipe_to_open">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1726">Whether the flap can be opened with a swipe gesture.

The area that can be swiped depends on the #HdyFlap:transition-type value.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="1688">The type of animation that will be used for reveal and fold transitions
in @self.

#HdyFlap:flap is transparent by default, which means the content will be
seen through it with %HDY_FLAP_TRANSITION_TYPE_OVER transitions; add the
.background style class to it if this is unwanted.</doc>
        <type name="FlapTransitionType"/>
      </property>
    </class>
    <record name="FlapClass"
            c:type="HdyFlapClass"
            glib:is-gtype-struct-for="Flap">
      <source-position filename="../src/hdy-flap.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <enumeration name="FlapFoldPolicy"
                 version="1.2"
                 glib:type-name="HdyFlapFoldPolicy"
                 glib:get-type="hdy_flap_fold_policy_get_type"
                 c:type="HdyFlapFoldPolicy">
      <doc xml:space="preserve"
           filename="../src/hdy-flap.c"
           line="69">These enumeration values describe the possible folding behavior in a #HdyFlap
widget.</doc>
      <member name="never"
              value="0"
              c:identifier="HDY_FLAP_FOLD_POLICY_NEVER"
              glib:nick="never"
              glib:name="HDY_FLAP_FOLD_POLICY_NEVER">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="71">Disable folding, the flap cannot reach narrow
  sizes.</doc>
      </member>
      <member name="always"
              value="1"
              c:identifier="HDY_FLAP_FOLD_POLICY_ALWAYS"
              glib:nick="always"
              glib:name="HDY_FLAP_FOLD_POLICY_ALWAYS">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="73">Keep the flap always folded.</doc>
      </member>
      <member name="auto"
              value="2"
              c:identifier="HDY_FLAP_FOLD_POLICY_AUTO"
              glib:nick="auto"
              glib:name="HDY_FLAP_FOLD_POLICY_AUTO">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="74">Fold and unfold the flap based on available
  space.</doc>
      </member>
    </enumeration>
    <enumeration name="FlapTransitionType"
                 version="1.2"
                 glib:type-name="HdyFlapTransitionType"
                 glib:get-type="hdy_flap_transition_type_get_type"
                 c:type="HdyFlapTransitionType">
      <doc xml:space="preserve"
           filename="../src/hdy-flap.c"
           line="83">These enumeration values describe the possible transitions between children
in a #HdyFlap widget, as well as which areas can be swiped via
#HdyFlap:swipe-to-open and #HdyFlap:swipe-to-close.

New values may be added to this enum over time.</doc>
      <member name="over"
              value="0"
              c:identifier="HDY_FLAP_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="HDY_FLAP_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="85">The flap slides over the content, which is
  dimmed. When folded, only the flap can be swiped.</doc>
      </member>
      <member name="under"
              value="1"
              c:identifier="HDY_FLAP_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="HDY_FLAP_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="87">The content slides over the flap. Only the
  content can be swiped.</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="HDY_FLAP_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="HDY_FLAP_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="../src/hdy-flap.c"
             line="89">The flap slides offscreen when hidden,
  neither the flap nor content overlap each other. Both widgets can be
  swiped.</doc>
      </member>
    </enumeration>
    <class name="HeaderBar"
           c:symbol-prefix="header_bar"
           c:type="HdyHeaderBar"
           parent="Gtk.Container"
           glib:type-name="HdyHeaderBar"
           glib:get-type="hdy_header_bar_get_type"
           glib:type-struct="HeaderBarClass">
      <source-position filename="../src/hdy-header-bar.h" line="54"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_header_bar_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2273">Creates a new #HdyHeaderBar widget.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2278">a new #HdyHeaderBar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_centering_policy"
              c:identifier="hdy_header_bar_get_centering_policy"
              glib:get-property="centering-policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2698">Gets the policy @self follows to horizontally align its center widget.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2704">the centering policy</doc>
          <type name="CenteringPolicy" c:type="HdyCenteringPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2700">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_custom_title"
              c:identifier="hdy_header_bar_get_custom_title"
              glib:get-property="custom-title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2498">Retrieves the custom title widget of the header. See
hdy_header_bar_set_custom_title().</doc>
        <source-position filename="../src/hdy-header-bar.h" line="72"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2505">the custom title widget
   of the header, or %NULL if none has been set explicitly.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2500">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_decoration_layout"
              c:identifier="hdy_header_bar_get_decoration_layout"
              glib:get-property="decoration-layout"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2675">Gets the decoration layout set with
hdy_header_bar_set_decoration_layout().</doc>
        <source-position filename="../src/hdy-header-bar.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2682">the decoration layout</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2677">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_subtitle"
              c:identifier="hdy_header_bar_get_has_subtitle"
              glib:get-property="has-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2606">Retrieves whether the header bar reserves space for
a subtitle, regardless if one is currently set or not.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2613">%TRUE if the header bar reserves space
    for a subtitle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2608">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="hdy_header_bar_get_interpolate_size"
              glib:get-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2813">Gets whether @self should interpolate its size on visible child change.

See hdy_header_bar_set_interpolate_size().</doc>
        <source-position filename="../src/hdy-header-bar.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2821">%TRUE if @self interpolates its size on visible child change, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2815">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_close_button"
              c:identifier="hdy_header_bar_get_show_close_button"
              glib:get-property="show-close-button"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2520">Returns whether this header bar shows the standard window
decorations.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2527">%TRUE if the decorations are shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2522">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="hdy_header_bar_get_subtitle"
              glib:get-property="subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2414">Retrieves the subtitle of the header. See hdy_header_bar_set_subtitle().</doc>
        <source-position filename="../src/hdy-header-bar.h" line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2420">the subtitle of the header, or %NULL if none has
   been set explicitly. The returned string is owned by the widget
   and must not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2416">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_header_bar_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2354">Retrieves the title of the header. See hdy_header_bar_set_title().</doc>
        <source-position filename="../src/hdy-header-bar.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2360">the title of the header, or %NULL if none has
   been set explicitly. The returned string is owned by the widget
   and must not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2356">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="hdy_header_bar_get_transition_duration"
              glib:get-property="transition-duration"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2746">Returns the amount of time (in milliseconds) that
transitions between pages in @self will take.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2753">the transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2748">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_running"
              c:identifier="hdy_header_bar_get_transition_running"
              glib:get-property="transition-running"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2792">Returns whether the @self is currently in a transition from one page to
another.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-bar.c"
               line="2799">%TRUE if the transition is currently running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2794">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pack_end"
              c:identifier="hdy_header_bar_pack_end"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2305">Adds @child to @self:, packed with reference to the
end of the @self:.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2307">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2308">the #GtkWidget to be added to @self:</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_start"
              c:identifier="hdy_header_bar_pack_start"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2288">Adds @child to @self:, packed with reference to the
start of the @self:.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2290">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2291">the #GtkWidget to be added to @self:</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_centering_policy"
              c:identifier="hdy_header_bar_set_centering_policy"
              glib:set-property="centering-policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2718">Sets the policy @self must follow to horizontally align its center widget.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2720">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="centering_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2721">the centering policy</doc>
            <type name="CenteringPolicy" c:type="HdyCenteringPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_custom_title"
              c:identifier="hdy_header_bar_set_custom_title"
              glib:set-property="custom-title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2436">Sets a custom title for the #HdyHeaderBar.

The title should help a user identify the current view. This
supersedes any title set by hdy_header_bar_set_title() or
hdy_header_bar_set_subtitle(). To achieve the same style as
the builtin title and subtitle, use the “title” and “subtitle”
style classes.

You should set the custom title to %NULL, for the header title
label to be visible again.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2438">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="title_widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2439">a custom widget to use for a title</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decoration_layout"
              c:identifier="hdy_header_bar_set_decoration_layout"
              glib:set-property="decoration-layout"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2630">Sets the decoration layout for this header bar, overriding
the #GtkSettings:gtk-decoration-layout setting.

There can be valid reasons for overriding the setting, such
as a header bar design that does not allow for buttons to take
room on the right, or only offers room for a single close button.
Split header bars are another example for overriding the
setting.

The format of the string is button names, separated by commas.
A colon separates the buttons that should appear on the left
from those on the right. Recognized button names are minimize,
maximize, close, icon (the window icon) and menu (a menu button
for the fallback app menu).

For example, “menu:minimize,maximize,close” specifies a menu
on the left, and minimize, maximize and close buttons on the right.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2632">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="layout"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2633">a decoration layout, or %NULL to unset the layout</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_subtitle"
              c:identifier="hdy_header_bar_set_has_subtitle"
              glib:set-property="has-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2573">Sets whether the header bar should reserve space
for a subtitle, even if none is currently set.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2575">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2576">%TRUE to reserve space for a subtitle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="hdy_header_bar_set_interpolate_size"
              glib:set-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2837">Sets whether or not @self will interpolate the size of its opposing
orientation when changing the visible child. If %TRUE, @self will interpolate
its size between the one of the previous visible child and the one of the new
visible child, according to the set transition duration and the orientation,
e.g. if @self is horizontal, it will interpolate the its height.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2839">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2840">%TRUE to interpolate the size</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_close_button"
              c:identifier="hdy_header_bar_set_show_close_button"
              glib:set-property="show-close-button"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2543">Sets whether this header bar shows the standard window decorations,
including close, maximize, and minimize.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2545">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2546">%TRUE to show standard window decorations</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="hdy_header_bar_set_subtitle"
              glib:set-property="subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2376">Sets the subtitle of the #HdyHeaderBar. The title should give a user
an additional detail to help them identify the current view.

Note that HdyHeaderBar by default reserves room for the subtitle,
even if none is currently set. If this is not desired, set the
#HdyHeaderBar:has-subtitle property to %FALSE.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2378">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2379">a subtitle, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_header_bar_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2322">Sets the title of the #HdyHeaderBar. The title should help a user
identify the current view. A good title should not include the
application name.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2324">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2325">a title, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="hdy_header_bar_set_transition_duration"
              glib:set-property="transition-duration"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2767">Sets the duration that transitions between pages in @self
will take.</doc>
        <source-position filename="../src/hdy-header-bar.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2769">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-bar.c"
                 line="2770">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="centering-policy"
                writable="1"
                transfer-ownership="none"
                setter="set_centering_policy"
                getter="get_centering_policy">
        <type name="CenteringPolicy"/>
      </property>
      <property name="custom-title"
                writable="1"
                transfer-ownership="none"
                setter="set_custom_title"
                getter="get_custom_title">
        <type name="Gtk.Widget"/>
      </property>
      <property name="decoration-layout"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_decoration_layout"
                getter="get_decoration_layout">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2143">The decoration layout for buttons. If this property is
not set, the #GtkSettings:gtk-decoration-layout setting
is used.

See hdy_header_bar_set_decoration_layout() for information
about the format of this string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="decoration-layout-set"
                version="0.0.10"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2162">Set to %TRUE if #HdyHeaderBar:decoration-layout is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-subtitle"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_has_subtitle"
                getter="get_has_subtitle">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2176">If %TRUE, reserve space for a subtitle, even if none
is currently set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-close-button"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_show_close_button"
                getter="get_show_close_button">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.c"
             line="2124">Whether to show window decorations.

Which buttons are actually shown and where is determined
by the #HdyHeaderBar:decoration-layout property, and by
the state of the window (e.g. a close button will not be
shown if the window can't be closed).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="spacing" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-running"
                transfer-ownership="none"
                getter="get_transition_running">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="HeaderBarClass"
            c:type="HdyHeaderBarClass"
            glib:is-gtype-struct-for="HeaderBar">
      <source-position filename="../src/hdy-header-bar.h" line="54"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-header-bar.h"
             line="46">The parent class</doc>
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="HeaderGroup"
           c:symbol-prefix="header_group"
           c:type="HdyHeaderGroup"
           parent="GObject.Object"
           glib:type-name="HdyHeaderGroup"
           glib:get-type="hdy_header_group_get_type"
           glib:type-struct="HeaderGroupClass">
      <source-position filename="../src/hdy-header-group.h" line="28"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_header_group_new">
        <source-position filename="../src/hdy-header-group.h" line="47"/>
        <return-value transfer-ownership="full">
          <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
        </return-value>
      </constructor>
      <method name="add_gtk_header_bar"
              c:identifier="hdy_header_group_add_gtk_header_bar"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="450">Adds @header_bar to @self.
When the widget is destroyed or no longer referenced elsewhere, it will
be removed from the header group.</doc>
        <source-position filename="../src/hdy-header-group.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="452">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="453">the #GtkHeaderBar to add</doc>
            <type name="Gtk.HeaderBar" c:type="GtkHeaderBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_header_bar"
              c:identifier="hdy_header_group_add_header_bar"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="425">Adds @header_bar to @self.
When the widget is destroyed or no longer referenced elsewhere, it will
be removed from the header group.</doc>
        <source-position filename="../src/hdy-header-group.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="427">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="428">the #HdyHeaderBar to add</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_header_group"
              c:identifier="hdy_header_group_add_header_group"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="475">Adds @header_group to @self.
When the nested group is no longer referenced elsewhere, it will be removed
from the header group.</doc>
        <source-position filename="../src/hdy-header-group.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="477">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="478">the #HdyHeaderGroup to add</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children"
              c:identifier="hdy_header_group_get_children"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="949">Returns the list of children associated with @self.</doc>
        <source-position filename="../src/hdy-header-group.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-group.c"
               line="955">the #GSList of
  children. The list is owned by libhandy and should not be modified.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="HeaderGroupChild"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="951">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_decorate_all"
              c:identifier="hdy_header_group_get_decorate_all"
              glib:get-property="decorate-all"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="1102">Gets whether the elements of the group should all receive the full decoration.</doc>
        <source-position filename="../src/hdy-header-group.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-group.c"
               line="1108">%TRUE if the elements of the group should all receive the full
  decoration, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1104">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_child"
              c:identifier="hdy_header_group_remove_child"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="1055">Removes @child from @self.</doc>
        <source-position filename="../src/hdy-header-group.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1057">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1058">the #HdyHeaderGroupChild to remove</doc>
            <type name="HeaderGroupChild" c:type="HdyHeaderGroupChild*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_gtk_header_bar"
              c:identifier="hdy_header_group_remove_gtk_header_bar"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="1005">Removes @header_bar from @self.</doc>
        <source-position filename="../src/hdy-header-group.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1007">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1008">the #GtkHeaderBar to remove</doc>
            <type name="Gtk.HeaderBar" c:type="GtkHeaderBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_header_bar"
              c:identifier="hdy_header_group_remove_header_bar"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="980">Removes @header_bar from @self.</doc>
        <source-position filename="../src/hdy-header-group.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="982">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="983">the #HdyHeaderBar to remove</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_header_group"
              c:identifier="hdy_header_group_remove_header_group"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="1030">Removes a nested #HdyHeaderGroup from a #HdyHeaderGroup</doc>
        <source-position filename="../src/hdy-header-group.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1032">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1033">the #HdyHeaderGroup to remove</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decorate_all"
              c:identifier="hdy_header_group_set_decorate_all"
              glib:set-property="decorate-all"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="1075">Sets whether the elements of the group should all receive the full decoration.</doc>
        <source-position filename="../src/hdy-header-group.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1077">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="decorate_all" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="1078">whether the elements of the group should all receive the full decoration</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="decorate-all"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_decorate_all"
                getter="get_decorate_all">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="819">Whether the elements of the group should all receive the full decoration.
This is useful in conjunction with #HdyLeaflet:folded when the leaflet
contains the header bars of the group, as you want them all to display the
complete decoration when the leaflet is folded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="update-decoration-layouts" when="last" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="838">This signal is emitted before updating the decoration layouts.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="HeaderGroupChild"
           c:symbol-prefix="header_group_child"
           c:type="HdyHeaderGroupChild"
           parent="GObject.Object"
           glib:type-name="HdyHeaderGroupChild"
           glib:get-type="hdy_header_group_child_get_type"
           glib:type-struct="HeaderGroupChildClass">
      <source-position filename="../src/hdy-header-group.h" line="23"/>
      <method name="get_child_type"
              c:identifier="hdy_header_group_child_get_child_type"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="931">Gets the child type.</doc>
        <source-position filename="../src/hdy-header-group.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-group.c"
               line="937">the child type.</doc>
          <type name="HeaderGroupChildType" c:type="HdyHeaderGroupChildType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="933">a #HdyHeaderGroupChild</doc>
            <type name="HeaderGroupChild" c:type="HdyHeaderGroupChild*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gtk_header_bar"
              c:identifier="hdy_header_group_child_get_gtk_header_bar"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="891">Gets the child #GtkHeaderBar.
Use hdy_header_group_child_get_child_type() to check the child type.</doc>
        <source-position filename="../src/hdy-header-group.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-group.c"
               line="898">the child #GtkHeaderBar, or %NULL in case of error.</doc>
          <type name="Gtk.HeaderBar" c:type="GtkHeaderBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="893">a #HdyHeaderGroupChild</doc>
            <type name="HeaderGroupChild" c:type="HdyHeaderGroupChild*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header_bar"
              c:identifier="hdy_header_group_child_get_header_bar"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="871">Gets the child #HdyHeaderBar.
Use hdy_header_group_child_get_child_type() to check the child type.</doc>
        <source-position filename="../src/hdy-header-group.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-group.c"
               line="878">the child #HdyHeaderBar, or %NULL in case of error.</doc>
          <type name="HeaderBar" c:type="HdyHeaderBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="873">a #HdyHeaderGroupChild</doc>
            <type name="HeaderGroupChild" c:type="HdyHeaderGroupChild*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header_group"
              c:identifier="hdy_header_group_child_get_header_group"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="911">Gets the child #HdyHeaderGroup.
Use hdy_header_group_child_get_child_type() to check the child type.</doc>
        <source-position filename="../src/hdy-header-group.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-header-group.c"
               line="918">the child #HdyHeaderGroup, or %NULL in case of error.</doc>
          <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-header-group.c"
                 line="913">a #HdyHeaderGroupChild</doc>
            <type name="HeaderGroupChild" c:type="HdyHeaderGroupChild*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="HeaderGroupChildClass"
            c:type="HdyHeaderGroupChildClass"
            glib:is-gtype-struct-for="HeaderGroupChild">
      <source-position filename="../src/hdy-header-group.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="HeaderGroupChildType"
                 version="1.0"
                 glib:type-name="HdyHeaderGroupChildType"
                 glib:get-type="hdy_header_group_child_type_get_type"
                 c:type="HdyHeaderGroupChildType">
      <doc xml:space="preserve"
           filename="../src/hdy-header-group.c"
           line="50">This enumeration value describes the child types handled by #HdyHeaderGroup.

New values may be added to this enumeration over time.</doc>
      <member name="header_bar"
              value="0"
              c:identifier="HDY_HEADER_GROUP_CHILD_TYPE_HEADER_BAR"
              glib:nick="header-bar"
              glib:name="HDY_HEADER_GROUP_CHILD_TYPE_HEADER_BAR">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="52">The child is a #HdyHeaderBar</doc>
      </member>
      <member name="gtk_header_bar"
              value="1"
              c:identifier="HDY_HEADER_GROUP_CHILD_TYPE_GTK_HEADER_BAR"
              glib:nick="gtk-header-bar"
              glib:name="HDY_HEADER_GROUP_CHILD_TYPE_GTK_HEADER_BAR">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="53">The child is a #GtkHeaderBar</doc>
      </member>
      <member name="header_group"
              value="2"
              c:identifier="HDY_HEADER_GROUP_CHILD_TYPE_HEADER_GROUP"
              glib:nick="header-group"
              glib:name="HDY_HEADER_GROUP_CHILD_TYPE_HEADER_GROUP">
        <doc xml:space="preserve"
             filename="../src/hdy-header-group.c"
             line="54">The child is a #HdyHeaderGroup</doc>
      </member>
    </enumeration>
    <record name="HeaderGroupClass"
            c:type="HdyHeaderGroupClass"
            glib:is-gtype-struct-for="HeaderGroup">
      <source-position filename="../src/hdy-header-group.h" line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Keypad"
           c:symbol-prefix="keypad"
           c:type="HdyKeypad"
           parent="Gtk.Bin"
           glib:type-name="HdyKeypad"
           glib:get-type="hdy_keypad_get_type"
           glib:type-struct="KeypadClass">
      <source-position filename="../src/hdy-keypad.h" line="34"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_keypad_new" version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="385">Create a new #HdyKeypad widget.</doc>
        <source-position filename="../src/hdy-keypad.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="392">the newly created #HdyKeypad widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="symbols_visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="387">whether the hash, plus, and asterisk symbols should be visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="letters_visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="388">whether the letters below the digits should be visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_column_spacing"
              c:identifier="hdy_keypad_get_column_spacing"
              glib:get-property="column-spacing"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="487">Returns the amount of space between the columns of @self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="493">the column spacing of @self</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="489">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end_action"
              c:identifier="hdy_keypad_get_end_action"
              glib:get-property="end-action"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="784">Returns the widget for the lower right corner (or left, in RTL locales) of
@self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="791">the end action widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="786">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_entry"
              c:identifier="hdy_keypad_get_entry"
              glib:get-property="entry"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="663">Get the connected entry. See hdy_keypad_set_entry() for details.</doc>
        <source-position filename="../src/hdy-keypad.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="669">the set #GtkEntry or %NULL if no widget was set</doc>
          <type name="Gtk.Entry" c:type="GtkEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="665">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_letters_visible"
              c:identifier="hdy_keypad_get_letters_visible"
              glib:get-property="letters-visible"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="539">Returns whether @self should display the standard letters below the digits on
its buttons.</doc>
        <source-position filename="../src/hdy-keypad.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="546">whether the letters below the digits should be visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="541">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_row_spacing"
              c:identifier="hdy_keypad_get_row_spacing"
              glib:get-property="row-spacing"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="435">Returns the amount of space between the rows of @self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="441">the row spacing of @self</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="437">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_action"
              c:identifier="hdy_keypad_get_start_action"
              glib:get-property="start-action"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="723">Returns the widget for the lower left corner (or right, in RTL locales) of
@self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="730">the start action widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="725">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbols_visible"
              c:identifier="hdy_keypad_get_symbols_visible"
              glib:get-property="symbols-visible"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="592">Returns whether @self should display the standard letters below the digits on
its buttons.

Returns Whether @self should display the hash and asterisk buttons, and
should display the plus symbol at the bottom of its 0 button.</doc>
        <source-position filename="../src/hdy-keypad.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-keypad.c"
               line="602">whether the hash, plus, and asterisk symbols should be visible</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="594">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_column_spacing"
              c:identifier="hdy_keypad_set_column_spacing"
              glib:set-property="column-spacing"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="458">Sets the amount of space between columns of @self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="460">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="461">the amount of space to insert between columns</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_end_action"
              c:identifier="hdy_keypad_set_end_action"
              glib:set-property="end-action"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="747">Sets the widget for the lower right corner (or left, in RTL locales) of
@self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="749">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="end_action"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="750">the end action widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_entry"
              c:identifier="hdy_keypad_set_entry"
              glib:set-property="entry"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="619">Binds @entry to @self and blocks any input which wouldn't be possible to type
with with the keypad.</doc>
        <source-position filename="../src/hdy-keypad.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="621">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="entry"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="622">a #GtkEntry</doc>
            <type name="Gtk.Entry" c:type="GtkEntry*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_letters_visible"
              c:identifier="hdy_keypad_set_letters_visible"
              glib:set-property="letters-visible"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="510">Sets whether @self should display the standard letters below the digits on
its buttons.</doc>
        <source-position filename="../src/hdy-keypad.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="512">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="letters_visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="513">whether the letters below the digits should be visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_row_spacing"
              c:identifier="hdy_keypad_set_row_spacing"
              glib:set-property="row-spacing"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="406">Sets the amount of space between rows of @self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="408">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="409">the amount of space to insert between rows</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_action"
              c:identifier="hdy_keypad_set_start_action"
              glib:set-property="start-action"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="686">Sets the widget for the lower left corner (or right, in RTL locales) of
@self.</doc>
        <source-position filename="../src/hdy-keypad.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="688">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="start_action"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="689">the start action widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_symbols_visible"
              c:identifier="hdy_keypad_set_symbols_visible"
              glib:set-property="symbols-visible"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="563">Sets whether @self should display the hash and asterisk buttons, and should
display the plus symbol at the bottom of its 0 button.</doc>
        <source-position filename="../src/hdy-keypad.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="565">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="symbols_visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-keypad.c"
                 line="566">whether the hash, plus, and asterisk symbols should be visible</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="column-spacing"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_column_spacing"
                getter="get_column_spacing">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="263">The amount of space between two consecutive columns.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="end-action"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_end_action"
                getter="get_end_action">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="322">The widget for the lower end corner of @self.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="entry"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_entry"
                getter="get_entry">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="307">The entry widget connected to the keypad. See hdy_keypad_set_entry() for
details.</doc>
        <type name="Gtk.Entry"/>
      </property>
      <property name="letters-visible"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_letters_visible"
                getter="get_letters_visible">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="277">Whether the keypad should display the standard letters below the digits on
its buttons.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="row-spacing"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_row_spacing"
                getter="get_row_spacing">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="249">The amount of space between two consecutive rows.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="start-action"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_start_action"
                getter="get_start_action">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="336">The widget for the lower start corner of @self.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="symbols-visible"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_symbols_visible"
                getter="get_symbols_visible">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.c"
             line="292">Whether the keypad should display the hash and asterisk buttons, and should
display the plus symbol at the bottom of its 0 button.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="KeypadClass"
            c:type="HdyKeypadClass"
            glib:is-gtype-struct-for="Keypad">
      <source-position filename="../src/hdy-keypad.h" line="34"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-keypad.h"
             line="26">The parent class</doc>
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Leaflet"
           c:symbol-prefix="leaflet"
           c:type="HdyLeaflet"
           parent="Gtk.Container"
           glib:type-name="HdyLeaflet"
           glib:get-type="hdy_leaflet_get_type"
           glib:type-struct="LeafletClass">
      <source-position filename="../src/hdy-leaflet.h" line="42"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Swipeable"/>
      <constructor name="new" c:identifier="hdy_leaflet_new">
        <source-position filename="../src/hdy-leaflet.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_adjacent_child"
              c:identifier="hdy_leaflet_get_adjacent_child"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="512">Gets the previous or next child that doesn't have 'navigatable' child
property set to %FALSE, or %NULL if it doesn't exist. This will be the same
widget hdy_leaflet_navigate() will navigate to.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="103"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="521">the previous or next child, or
  %NULL if it doesn't exist.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="514">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="515">the direction</doc>
            <type name="NavigationDirection" c:type="HdyNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_can_swipe_back"
              c:identifier="hdy_leaflet_get_can_swipe_back"
              glib:get-property="can-swipe-back"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="457">Returns whether the #HdyLeaflet allows swiping to the previous child.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="463">%TRUE if back swipe is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="459">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_swipe_forward"
              c:identifier="hdy_leaflet_get_can_swipe_forward"
              glib:get-property="can-swipe-forward"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="494">Returns whether the #HdyLeaflet allows swiping to the next child.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="500">%TRUE if forward swipe is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="496">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_by_name"
              c:identifier="hdy_leaflet_get_child_by_name"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="557">Finds the child of @self with the name given as the argument. Returns %NULL
if there is no child with this name.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="110"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="565">the requested child of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="559">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="560">the name of the child to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_transition_duration"
              c:identifier="hdy_leaflet_get_child_transition_duration"
              glib:get-property="child-transition-duration">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="281">Returns the amount of time (in milliseconds) that
transitions between children in @self will take.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="288">the child transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="283">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_transition_running"
              c:identifier="hdy_leaflet_get_child_transition_running"
              glib:get-property="child-transition-running">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="384">Returns whether @self is currently in a transition from one page to
another.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="391">%TRUE if the transition is currently running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="386">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_folded"
              c:identifier="hdy_leaflet_get_folded"
              glib:get-property="folded">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="108">Gets whether @self is folded.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="114">whether @self is folded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="110">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="hdy_leaflet_get_homogeneous">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="148">Gets whether @self is homogeneous for the given fold and orientation.
See hdy_leaflet_set_homogeneous().</doc>
        <source-position filename="../src/hdy-leaflet.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="157">whether @self is homogeneous for the given fold and orientation.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="150">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="folded" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="151">the fold</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="152">the orientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="hdy_leaflet_get_interpolate_size"
              glib:get-property="interpolate-size">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="421">Returns whether the #HdyLeaflet is set up to interpolate between
the sizes of children on page switch.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="428">%TRUE if child sizes are interpolated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="423">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_transition_duration"
              c:identifier="hdy_leaflet_get_mode_transition_duration"
              glib:get-property="mode-transition-duration">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="247">Returns the amount of time (in milliseconds) that
transitions between modes in @self will take.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="254">the mode transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="249">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="hdy_leaflet_get_transition_type"
              glib:get-property="transition-type"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="169">Gets the type of animation that will be used
for transitions between modes and children in @self.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="176">the current transition type of @self</doc>
          <type name="LeafletTransitionType"
                c:type="HdyLeafletTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="171">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="hdy_leaflet_get_visible_child"
              glib:get-property="visible-child">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="315">Gets the visible child widget.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="321">the visible child widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="317">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child_name"
              c:identifier="hdy_leaflet_get_visible_child_name"
              glib:get-property="visible-child-name">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="350">Gets the name of the currently visible child widget.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="356">the name of the visible child</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="352">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_child_after"
              c:identifier="hdy_leaflet_insert_child_after"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="598">Inserts @child in the position after @sibling in the list of children.
If @sibling is %NULL, insert @child at the first position.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="600">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="601">the #GtkWidget to insert</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="602">the sibling after which to insert @child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="navigate"
              c:identifier="hdy_leaflet_navigate"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="535">Switches to the previous or next child that doesn't have 'navigatable' child
property set to %FALSE, similar to performing a swipe gesture to go in
@direction.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-leaflet.c"
               line="544">%TRUE if visible child was changed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="537">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="538">the direction</doc>
            <type name="NavigationDirection" c:type="HdyNavigationDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="hdy_leaflet_prepend" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="578">Inserts @child at the first position in @self.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="580">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="581">the #GtkWidget to prepend</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_child_after"
              c:identifier="hdy_leaflet_reorder_child_after"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="624">Moves @child to the position after @sibling in the list of children.
If @sibling is %NULL, move @child to the first position.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="626">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="627">the #GtkWidget to move, must be a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="628">the sibling to move @child after, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_swipe_back"
              c:identifier="hdy_leaflet_set_can_swipe_back"
              glib:set-property="can-swipe-back"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="438">Sets whether or not @self allows switching to the previous child that has
'navigatable' child property set to %TRUE via a swipe gesture</doc>
        <source-position filename="../src/hdy-leaflet.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="440">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="can_swipe_back" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="441">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_swipe_forward"
              c:identifier="hdy_leaflet_set_can_swipe_forward"
              glib:set-property="can-swipe-forward"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="475">Sets whether or not @self allows switching to the next child that has
'navigatable' child property set to %TRUE via a swipe gesture.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="477">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="can_swipe_forward" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="478">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_transition_duration"
              c:identifier="hdy_leaflet_set_child_transition_duration"
              glib:set-property="child-transition-duration">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="298">Sets the duration that transitions between children in @self
will take.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="300">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="301">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="hdy_leaflet_set_homogeneous">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="124">Sets the #HdyLeaflet to be homogeneous or not for the given fold and orientation.
If it is homogeneous, the #HdyLeaflet will request the same
width or height for all its children depending on the orientation.
If it isn't and it is folded, the leaflet may change width or height
when a different child becomes visible.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="126">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="folded" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="127">the fold</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="128">the orientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="129">%TRUE to make @self homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="hdy_leaflet_set_interpolate_size"
              glib:set-property="interpolate-size">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="401">Sets whether or not @self will interpolate its size when
changing the visible child. If the #HdyLeaflet:interpolate-size
property is set to %TRUE, @self will interpolate its size between
the current one and the one it'll take after changing the
visible child, according to the set transition duration.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="403">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="404">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode_transition_duration"
              c:identifier="hdy_leaflet_set_mode_transition_duration"
              glib:set-property="mode-transition-duration">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="264">Sets the duration that transitions between modes in @self
will take.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="266">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="267">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="hdy_leaflet_set_transition_type"
              glib:set-property="transition-type"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="204">Sets the type of animation that will be used for transitions between modes
and children in @self.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about to
become current.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="206">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="207">the new transition type</doc>
            <type name="LeafletTransitionType"
                  c:type="HdyLeafletTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child"
              c:identifier="hdy_leaflet_set_visible_child"
              glib:set-property="visible-child">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="331">Makes @visible_child visible using a transition determined by
HdyLeaflet:transition-type and HdyLeaflet:child-transition-duration. The
transition can be cancelled by the user, in which case visible child will
change back to the previously visible child.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="333">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="visible_child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="334">the new child</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child_name"
              c:identifier="hdy_leaflet_set_visible_child_name"
              glib:set-property="visible-child-name">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="366">Makes the child with the name @name visible.

See hdy_leaflet_set_visible_child() for more details.</doc>
        <source-position filename="../src/hdy-leaflet.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="368">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-leaflet.c"
                 line="369">the name of a child</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-swipe-back"
                version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_can_swipe_back"
                getter="get_can_swipe_back">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="1138">Whether or not the leaflet allows switching to the previous child that has
'navigatable' child property set to %TRUE via a swipe gesture.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-swipe-forward"
                version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_can_swipe_forward"
                getter="get_can_swipe_forward">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="1153">Whether or not the leaflet allows switching to the next child that has
'navigatable' child property set to %TRUE via a swipe gesture.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="child-transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_child_transition_duration"
                getter="get_child_transition_duration">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="child-transition-running"
                transfer-ownership="none"
                getter="get_child_transition_running">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="folded" transfer-ownership="none" getter="get_folded">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="1014">%TRUE if the leaflet is folded.

The leaflet will be folded if the size allocated to it is smaller than the
sum of the natural size of its children, it will be unfolded otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hhomogeneous-folded"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hhomogeneous-unfolded"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode-transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_mode_transition_duration"
                getter="get_mode_transition_duration">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-type"
                version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="1091">The type of animation that will be used for transitions between modes and
children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about
to become current.</doc>
        <type name="LeafletTransitionType"/>
      </property>
      <property name="vhomogeneous-folded"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="vhomogeneous-unfolded"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible-child"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child"
                getter="get_visible_child">
        <type name="Gtk.Widget"/>
      </property>
      <property name="visible-child-name"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child_name"
                getter="get_visible_child_name">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="LeafletClass"
            c:type="HdyLeafletClass"
            glib:is-gtype-struct-for="Leaflet">
      <source-position filename="../src/hdy-leaflet.h" line="42"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.h"
             line="34">The parent class</doc>
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="LeafletTransitionType"
                 version="0.0.12"
                 glib:type-name="HdyLeafletTransitionType"
                 glib:get-type="hdy_leaflet_transition_type_get_type"
                 c:type="HdyLeafletTransitionType">
      <doc xml:space="preserve"
           filename="../src/hdy-leaflet.c"
           line="48">This enumeration value describes the possible transitions between modes and
children in a #HdyLeaflet widget.

New values may be added to this enumeration over time.</doc>
      <member name="over"
              value="0"
              c:identifier="HDY_LEAFLET_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="HDY_LEAFLET_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="50">Cover the old page or uncover the new page, sliding from or towards the end according to orientation, text direction and children order</doc>
      </member>
      <member name="under"
              value="1"
              c:identifier="HDY_LEAFLET_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="HDY_LEAFLET_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="51">Uncover the new page or cover the old page, sliding from or towards the start according to orientation, text direction and children order</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="HDY_LEAFLET_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="HDY_LEAFLET_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="../src/hdy-leaflet.c"
             line="52">Slide from left, right, up or down according to the orientation, text direction and the children order</doc>
      </member>
    </enumeration>
    <enumeration name="NavigationDirection"
                 version="1.0"
                 glib:type-name="HdyNavigationDirection"
                 glib:get-type="hdy_navigation_direction_get_type"
                 c:type="HdyNavigationDirection">
      <doc xml:space="preserve"
           filename="../src/hdy-navigation-direction.c"
           line="17">Represents direction of a swipe navigation gesture in #HdyDeck and
#HdyLeaflet.</doc>
      <member name="back"
              value="0"
              c:identifier="HDY_NAVIGATION_DIRECTION_BACK"
              glib:nick="back"
              glib:name="HDY_NAVIGATION_DIRECTION_BACK">
        <doc xml:space="preserve"
             filename="../src/hdy-navigation-direction.c"
             line="19">Corresponds to start or top, depending on orientation and text direction</doc>
      </member>
      <member name="forward"
              value="1"
              c:identifier="HDY_NAVIGATION_DIRECTION_FORWARD"
              glib:nick="forward"
              glib:name="HDY_NAVIGATION_DIRECTION_FORWARD">
        <doc xml:space="preserve"
             filename="../src/hdy-navigation-direction.c"
             line="20">Corresponds to end or bottom, depending on orientation and text direction</doc>
      </member>
    </enumeration>
    <class name="PreferencesGroup"
           c:symbol-prefix="preferences_group"
           c:type="HdyPreferencesGroup"
           parent="Gtk.Bin"
           glib:type-name="HdyPreferencesGroup"
           glib:get-type="hdy_preferences_group_get_type"
           glib:type-struct="PreferencesGroupClass">
      <source-position filename="../src/hdy-preferences-group.h" line="34"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_group_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="337">Creates a new #HdyPreferencesGroup.</doc>
        <source-position filename="../src/hdy-preferences-group.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-group.c"
               line="342">a new #HdyPreferencesGroup</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_description"
              c:identifier="hdy_preferences_group_get_description"
              glib:get-property="description"
              version="0.0.10">
        <source-position filename="../src/hdy-preferences-group.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-group.c"
               line="407">the description of @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="404">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_preferences_group_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="352">Gets the title of @self.</doc>
        <source-position filename="../src/hdy-preferences-group.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-group.c"
               line="358">the title of @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="354">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="hdy_preferences_group_get_use_markup"
              glib:get-property="use-markup"
              version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="451">Gets whether @self uses markup for the title and description.</doc>
        <source-position filename="../src/hdy-preferences-group.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-group.c"
               line="457">Whether @self uses markup for its labels.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="453">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="hdy_preferences_group_set_description"
              glib:set-property="description"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="423">Sets the description for @self.</doc>
        <source-position filename="../src/hdy-preferences-group.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="425">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="426">the description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_preferences_group_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="374">Sets the title for @self.</doc>
        <source-position filename="../src/hdy-preferences-group.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="376">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="377">the title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="hdy_preferences_group_set_use_markup"
              glib:set-property="use-markup"
              version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="473">Sets whether @self uses markup for the title and description.</doc>
        <source-position filename="../src/hdy-preferences-group.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="475">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-group.c"
                 line="476">whether to use markup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="description"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="271">The description for this group of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="285">The title for this group of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-markup"
                version="1.4"
                writable="1"
                transfer-ownership="none"
                setter="set_use_markup"
                getter="get_use_markup">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.c"
             line="299">Whether to use markup for the title and description.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="PreferencesGroupClass"
            c:type="HdyPreferencesGroupClass"
            glib:is-gtype-struct-for="PreferencesGroup">
      <source-position filename="../src/hdy-preferences-group.h" line="34"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-group.h"
             line="26">The parent class</doc>
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PreferencesPage"
           c:symbol-prefix="preferences_page"
           c:type="HdyPreferencesPage"
           parent="Gtk.Bin"
           glib:type-name="HdyPreferencesPage"
           glib:get-type="hdy_preferences_page_get_type"
           glib:type-struct="PreferencesPageClass">
      <source-position filename="../src/hdy-preferences-page.h" line="34"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_page_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.c"
             line="208">Creates a new #HdyPreferencesPage.</doc>
        <source-position filename="../src/hdy-preferences-page.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-page.c"
               line="213">a new #HdyPreferencesPage</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_icon_name"
              c:identifier="hdy_preferences_page_get_icon_name"
              glib:get-property="icon-name"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.c"
             line="223">Gets the icon name for @self, or %NULL.</doc>
        <source-position filename="../src/hdy-preferences-page.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-page.c"
               line="229">the icon name for @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-page.c"
                 line="225">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_preferences_page_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.c"
             line="273">Gets the title of @self, or %NULL.</doc>
        <source-position filename="../src/hdy-preferences-page.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-page.c"
               line="279">the title of the @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-page.c"
                 line="275">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="hdy_preferences_page_set_icon_name"
              glib:set-property="icon-name"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.c"
             line="245">Sets the icon name for @self.</doc>
        <source-position filename="../src/hdy-preferences-page.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-page.c"
                 line="247">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-page.c"
                 line="248">the icon name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_preferences_page_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.c"
             line="295">Sets the title of @self.</doc>
        <source-position filename="../src/hdy-preferences-page.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-page.c"
                 line="297">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-page.c"
                 line="298">the title of the page, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.c"
             line="164">The icon name for this page of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.c"
             line="178">The title for this page of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="PreferencesPageClass"
            c:type="HdyPreferencesPageClass"
            glib:is-gtype-struct-for="PreferencesPage">
      <source-position filename="../src/hdy-preferences-page.h" line="34"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-page.h"
             line="26">The parent class</doc>
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PreferencesRow"
           c:symbol-prefix="preferences_row"
           c:type="HdyPreferencesRow"
           parent="Gtk.ListBoxRow"
           glib:type-name="HdyPreferencesRow"
           glib:get-type="hdy_preferences_row_get_type"
           glib:type-struct="PreferencesRowClass">
      <source-position filename="../src/hdy-preferences-row.h" line="37"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_row_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.c"
             line="143">Creates a new #HdyPreferencesRow.</doc>
        <source-position filename="../src/hdy-preferences-row.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-row.c"
               line="148">a new #HdyPreferencesRow</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_title"
              c:identifier="hdy_preferences_row_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.c"
             line="158">Gets the title of the preference represented by @self.</doc>
        <source-position filename="../src/hdy-preferences-row.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-row.c"
               line="164">the title of the preference represented
         by @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-row.c"
                 line="160">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="hdy_preferences_row_get_use_underline"
              glib:get-property="use-underline"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.c"
             line="209">Gets whether an embedded underline in the text of the title indicates a
mnemonic. See hdy_preferences_row_set_use_underline().</doc>
        <source-position filename="../src/hdy-preferences-row.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-row.c"
               line="216">%TRUE if an embedded underline in the title indicates the mnemonic
         accelerator keys.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-row.c"
                 line="211">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_preferences_row_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.c"
             line="181">Sets the title of the preference represented by @self.</doc>
        <source-position filename="../src/hdy-preferences-row.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-row.c"
                 line="183">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-row.c"
                 line="184">the title, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="hdy_preferences_row_set_use_underline"
              glib:set-property="use-underline"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.c"
             line="233">If true, an underline in the text of the title indicates the next character
should be used for the mnemonic accelerator key.</doc>
        <source-position filename="../src/hdy-preferences-row.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-row.c"
                 line="235">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-row.c"
                 line="236">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="title"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.c"
             line="106">The title of the preference represented by this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-underline"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.c"
             line="120">Whether an embedded underline in the text of the title indicates a
mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
      </field>
    </class>
    <record name="PreferencesRowClass"
            c:type="HdyPreferencesRowClass"
            glib:is-gtype-struct-for="PreferencesRow">
      <source-position filename="../src/hdy-preferences-row.h" line="37"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-row.h"
             line="26">The parent class</doc>
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PreferencesWindow"
           c:symbol-prefix="preferences_window"
           c:type="HdyPreferencesWindow"
           parent="Window"
           glib:type-name="HdyPreferencesWindow"
           glib:get-type="hdy_preferences_window_get_type"
           glib:type-struct="PreferencesWindowClass">
      <source-position filename="../src/hdy-preferences-window.h" line="35"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_window_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="605">Creates a new #HdyPreferencesWindow.</doc>
        <source-position filename="../src/hdy-preferences-window.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-window.c"
               line="610">a new #HdyPreferencesWindow</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="close_subpage"
              c:identifier="hdy_preferences_window_close_subpage"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="763">Closes the current subpage to return back to the preferences, if there is no
presented subpage, this does nothing.</doc>
        <source-position filename="../src/hdy-preferences-window.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="765">a #HdyPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="HdyPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_swipe_back"
              c:identifier="hdy_preferences_window_get_can_swipe_back"
              glib:get-property="can-swipe-back"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="704">Returns whether or not @self allows switching from a subpage to the
preferences via a swipe gesture.</doc>
        <source-position filename="../src/hdy-preferences-window.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-window.c"
               line="711">%TRUE if back swipe is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="706">a #HdyPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="HdyPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_enabled"
              c:identifier="hdy_preferences_window_get_search_enabled"
              glib:get-property="search-enabled"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="620">Gets whether search is enabled for @self.</doc>
        <source-position filename="../src/hdy-preferences-window.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-preferences-window.c"
               line="626">whether search is enabled for @self.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="622">a #HdyPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="HdyPreferencesWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="present_subpage"
              c:identifier="hdy_preferences_window_present_subpage"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="727">Sets @subpage as the window's subpage and present it.
The transition can be cancelled by the user, in which case visible child will
change back to the previously visible child.</doc>
        <source-position filename="../src/hdy-preferences-window.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="729">a #HdyPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="HdyPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="subpage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="730">the subpage</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_swipe_back"
              c:identifier="hdy_preferences_window_set_can_swipe_back"
              glib:set-property="can-swipe-back"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="674">Sets whether or not @self allows switching from a subpage to the preferences
via a swipe gesture.</doc>
        <source-position filename="../src/hdy-preferences-window.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="676">a #HdyPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="HdyPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="can_swipe_back" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="677">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_enabled"
              c:identifier="hdy_preferences_window_set_search_enabled"
              glib:set-property="search-enabled"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="642">Sets whether search is enabled for @self.</doc>
        <source-position filename="../src/hdy-preferences-window.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="644">a #HdyPreferencesWindow</doc>
            <type name="PreferencesWindow" c:type="HdyPreferencesWindow*"/>
          </instance-parameter>
          <parameter name="search_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-preferences-window.c"
                 line="645">%TRUE to enable search, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-swipe-back"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_swipe_back"
                getter="get_can_swipe_back">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="552">Whether or not the window allows closing the subpage via a swipe gesture.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="search-enabled"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_search_enabled"
                getter="get_search_enabled">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.c"
             line="538">Whether search is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Window" c:type="HdyWindow"/>
      </field>
    </class>
    <record name="PreferencesWindowClass"
            c:type="HdyPreferencesWindowClass"
            glib:is-gtype-struct-for="PreferencesWindow">
      <source-position filename="../src/hdy-preferences-window.h" line="35"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="../src/hdy-preferences-window.h"
             line="27">The parent class</doc>
        <type name="WindowClass" c:type="HdyWindowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SearchBar"
           c:symbol-prefix="search_bar"
           c:type="HdySearchBar"
           parent="Gtk.Bin"
           glib:type-name="HdySearchBar"
           glib:get-type="hdy_search_bar_get_type"
           glib:type-struct="SearchBarClass">
      <source-position filename="../src/hdy-search-bar.h" line="30"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_search_bar_new"
                   version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="504">Creates a #HdySearchBar. You will need to tell it about
which widget is going to be your text entry using
hdy_search_bar_connect_entry().</doc>
        <source-position filename="../src/hdy-search-bar.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-search-bar.c"
               line="511">a new #HdySearchBar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="connect_entry"
              c:identifier="hdy_search_bar_connect_entry"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="548">Connects the #GtkEntry widget passed as the one to be used in
this search bar. The entry should be a descendant of the search bar.
This is only required if the entry isn’t the direct child of the
search bar (as in our main example).</doc>
        <source-position filename="../src/hdy-search-bar.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="550">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="551">a #GtkEntry</doc>
            <type name="Gtk.Entry" c:type="GtkEntry*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_search_mode"
              c:identifier="hdy_search_bar_get_search_mode"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="570">Returns whether the search mode is on or off.</doc>
        <source-position filename="../src/hdy-search-bar.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-search-bar.c"
               line="576">whether search mode is toggled on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="572">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_close_button"
              c:identifier="hdy_search_bar_get_show_close_button"
              glib:get-property="show-close-button"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="610">Returns whether the close button is shown.</doc>
        <source-position filename="../src/hdy-search-bar.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-search-bar.c"
               line="616">whether the close button is shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="612">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_event"
              c:identifier="hdy_search_bar_handle_event"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="205">This function should be called when the top-level
window which contains the search bar received a key event.

If the key event is handled by the search bar, the bar will
be shown, the entry populated with the entered text and %GDK_EVENT_STOP
will be returned. The caller should ensure that events are
not propagated further.

If no entry has been connected to the search bar, using
hdy_search_bar_connect_entry(), this function will return
immediately with a warning.

## Showing the search bar on key presses

|[&lt;!-- language="C" --&gt;
static gboolean
on_key_press_event (GtkWidget *widget,
                    GdkEvent  *event,
                    gpointer   user_data)
{
  HdySearchBar *bar = HDY_SEARCH_BAR (user_data);
  return hdy_search_bar_handle_event (self, event);
}

static void
create_toplevel (void)
{
  GtkWidget *window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  GtkWindow *search_bar = hdy_search_bar_new ();

 // Add more widgets to the window...

  g_signal_connect (window,
                   "key-press-event",
                    G_CALLBACK (on_key_press_event),
                    search_bar);
}
]|</doc>
        <source-position filename="../src/hdy-search-bar.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-search-bar.c"
               line="249">%GDK_EVENT_STOP if the key press event resulted
    in text being entered in the search entry (and revealing
    the search bar if necessary), %GDK_EVENT_PROPAGATE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="207">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="208">a #GdkEvent containing key press events</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_mode"
              c:identifier="hdy_search_bar_set_search_mode"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="590">Switches the search mode on or off.</doc>
        <source-position filename="../src/hdy-search-bar.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="592">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="search_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="593">the new state of the search mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_close_button"
              c:identifier="hdy_search_bar_set_show_close_button"
              glib:set-property="show-close-button"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="630">Shows or hides the close button. Applications that
already have a “search” toggle button should not show a close
button in their search bar, as it duplicates the role of the
toggle button.</doc>
        <source-position filename="../src/hdy-search-bar.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="632">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-search-bar.c"
                 line="633">whether the close button will be shown or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="search-mode-enabled"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="442">Whether the search mode is on and the search bar shown.

See hdy_search_bar_set_search_mode() for details.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-close-button"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_show_close_button"
                getter="get_show_close_button">
        <doc xml:space="preserve"
             filename="../src/hdy-search-bar.c"
             line="456">Whether to show the close button in the toolbar.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="SearchBarClass"
            c:type="HdySearchBarClass"
            glib:is-gtype-struct-for="SearchBar">
      <source-position filename="../src/hdy-search-bar.h" line="30"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Squeezer"
           c:symbol-prefix="squeezer"
           c:type="HdySqueezer"
           parent="Gtk.Container"
           glib:type-name="HdySqueezer"
           glib:get-type="hdy_squeezer_get_type"
           glib:type-struct="SqueezerClass">
      <source-position filename="../src/hdy-squeezer.h" line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="hdy_squeezer_new">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1220">Creates a new #HdySqueezer container.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1225">a new #HdySqueezer</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child_enabled"
              c:identifier="hdy_squeezer_get_child_enabled">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1445">Gets whether @child is enabled.

See hdy_squeezer_set_child_enabled().</doc>
        <source-position filename="../src/hdy-squeezer.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1454">%TRUE if @child is enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1447">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1448">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="hdy_squeezer_get_homogeneous"
              glib:get-property="homogeneous"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1233">Gets whether @self is homogeneous.

See hdy_squeezer_set_homogeneous().</doc>
        <source-position filename="../src/hdy-squeezer.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1241">%TRUE if @self is homogeneous, %FALSE is not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1235">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="hdy_squeezer_get_interpolate_size"
              glib:get-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1380">Gets whether @self should interpolate its size on visible child change.

See hdy_squeezer_set_interpolate_size().</doc>
        <source-position filename="../src/hdy-squeezer.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1388">%TRUE if @self interpolates its size on visible child change, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1382">A #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="hdy_squeezer_get_transition_duration"
              glib:get-property="transition-duration">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1285">Gets the amount of time (in milliseconds) that transitions between children
in @self will take.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1292">the transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1287">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_running"
              c:identifier="hdy_squeezer_get_transition_running"
              glib:get-property="transition-running">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1364">Gets whether @self is currently in a transition from one child to another.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1370">%TRUE if the transition is currently running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1366">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="hdy_squeezer_get_transition_type"
              glib:get-property="transition-type">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1322">Gets the type of animation that will be used for transitions between children
in @self.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1329">the current transition type of @self</doc>
          <type name="SqueezerTransitionType"
                c:type="HdySqueezerTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1324">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="hdy_squeezer_get_visible_child"
              glib:get-property="visible-child">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1428">Gets the currently visible child of @self, or %NULL if there are no visible
children.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1435">the visible child of the #HdySqueezer</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1430">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xalign"
              c:identifier="hdy_squeezer_get_xalign"
              glib:get-property="xalign"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1509">Gets the #HdySqueezer:xalign property for @self.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1515">the xalign property</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1511">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_yalign"
              c:identifier="hdy_squeezer_get_yalign"
              glib:get-property="yalign"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1552">Gets the #HdySqueezer:yalign property for @self.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-squeezer.c"
               line="1558">the yalign property</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1554">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child_enabled"
              c:identifier="hdy_squeezer_set_child_enabled">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1472">Make @self enable or disable @child. If a child is disabled, it will be
ignored when looking for the child fitting the available size best. This
allows to programmatically and prematurely hide a child of @self even if it
fits in the available space.

This can be used e.g. to ensure a certain child is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1474">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1475">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1476">%TRUE to enable the child, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="hdy_squeezer_set_homogeneous"
              glib:set-property="homogeneous"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1253">Sets @self to be homogeneous or not. If it is homogeneous, @self will request
the same size for all its children for its opposite orientation, e.g. if
@self is oriented horizontally and is homogeneous, it will request the same
height for all its children. If it isn't, @self may change size when a
different child becomes visible.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1255">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1256">%TRUE to make @self homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="hdy_squeezer_set_interpolate_size"
              glib:set-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1400">Sets whether or not @self will interpolate the size of its opposing
orientation when changing the visible child. If %TRUE, @self will interpolate
its size between the one of the previous visible child and the one of the new
visible child, according to the set transition duration and the orientation,
e.g. if @self is horizontal, it will interpolate the its height.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1402">A #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1403">%TRUE to interpolate the size</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="hdy_squeezer_set_transition_duration"
              glib:set-property="transition-duration">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1302">Sets the duration that transitions between children in @self will take.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1304">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1305">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="hdy_squeezer_set_transition_type"
              glib:set-property="transition-type">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1339">Sets the type of animation that will be used for transitions between children
in @self. Available types include various kinds of fades and slides.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the child that is about to become
current.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1341">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1342">the new transition type</doc>
            <type name="SqueezerTransitionType"
                  c:type="HdySqueezerTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_xalign"
              c:identifier="hdy_squeezer_set_xalign"
              glib:set-property="xalign"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1527">Sets the #HdySqueezer:xalign property for @self.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1529">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="xalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1530">the new xalign value, between 0 and 1</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_yalign"
              c:identifier="hdy_squeezer_set_yalign"
              glib:set-property="yalign"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1570">Sets the #HdySqueezer:yalign property for @self.</doc>
        <source-position filename="../src/hdy-squeezer.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1572">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="yalign" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-squeezer.c"
                 line="1573">the new yalign value, between 0 and 1</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <property name="homogeneous"
                writable="1"
                transfer-ownership="none"
                setter="set_homogeneous"
                getter="get_homogeneous">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-running"
                transfer-ownership="none"
                getter="get_transition_running">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type">
        <type name="SqueezerTransitionType"/>
      </property>
      <property name="visible-child"
                transfer-ownership="none"
                getter="get_visible_child">
        <type name="Gtk.Widget"/>
      </property>
      <property name="xalign"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_xalign"
                getter="get_xalign">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1149">The xalign property determines the horizontal alignment of the children
inside the squeezer's size allocation.
Compare this to #GtkWidget:halign, which determines how the squeezer's size
allocation is positioned in the space available for the squeezer.
The range goes from 0 (start) to 1 (end).

This will affect the position of children too wide to fit in the squeezer
as they are fading out.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="yalign"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_yalign"
                getter="get_yalign">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="1171">The yalign property determines the vertical alignment of the children inside
the squeezer's size allocation.
Compare this to #GtkWidget:valign, which determines how the squeezer's size
allocation is positioned in the space available for the squeezer.
The range goes from 0 (top) to 1 (bottom).

This will affect the position of children too tall to fit in the squeezer
as they are fading out.</doc>
        <type name="gfloat" c:type="gfloat"/>
      </property>
    </class>
    <record name="SqueezerClass"
            c:type="HdySqueezerClass"
            glib:is-gtype-struct-for="Squeezer">
      <source-position filename="../src/hdy-squeezer.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <enumeration name="SqueezerTransitionType"
                 glib:type-name="HdySqueezerTransitionType"
                 glib:get-type="hdy_squeezer_transition_type_get_type"
                 c:type="HdySqueezerTransitionType">
      <doc xml:space="preserve"
           filename="../src/hdy-squeezer.c"
           line="45">These enumeration values describe the possible transitions between children
in a #HdySqueezer widget.</doc>
      <member name="none"
              value="0"
              c:identifier="HDY_SQUEEZER_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="HDY_SQUEEZER_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="47">No transition</doc>
      </member>
      <member name="crossfade"
              value="1"
              c:identifier="HDY_SQUEEZER_TRANSITION_TYPE_CROSSFADE"
              glib:nick="crossfade"
              glib:name="HDY_SQUEEZER_TRANSITION_TYPE_CROSSFADE">
        <doc xml:space="preserve"
             filename="../src/hdy-squeezer.c"
             line="48">A cross-fade</doc>
      </member>
    </enumeration>
    <class name="StatusPage"
           c:symbol-prefix="status_page"
           c:type="HdyStatusPage"
           parent="Gtk.Bin"
           glib:type-name="HdyStatusPage"
           glib:get-type="hdy_status_page_get_type"
           glib:type-struct="StatusPageClass">
      <source-position filename="../src/hdy-status-page.h" line="22"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_status_page_new" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="276">Creates a new #HdyStatusPage.</doc>
        <source-position filename="../src/hdy-status-page.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-status-page.c"
               line="281">a new #HdyStatusPage</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_description"
              c:identifier="hdy_status_page_get_description"
              glib:get-property="description"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="378">Gets the description for @self.</doc>
        <source-position filename="../src/hdy-status-page.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-status-page.c"
               line="384">the description for @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="380">a #HdyStatusPage</doc>
            <type name="StatusPage" c:type="HdyStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="hdy_status_page_get_icon_name"
              glib:get-property="icon-name"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="291">Gets the icon name for @self.</doc>
        <source-position filename="../src/hdy-status-page.h" line="28"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-status-page.c"
               line="297">the icon name for @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="293">a #HdyStatusPage</doc>
            <type name="StatusPage" c:type="HdyStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_status_page_get_title"
              glib:get-property="title"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="336">Gets the title for @self.</doc>
        <source-position filename="../src/hdy-status-page.h" line="34"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-status-page.c"
               line="342">the title for @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="338">a #HdyStatusPage</doc>
            <type name="StatusPage" c:type="HdyStatusPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="hdy_status_page_set_description"
              glib:set-property="description"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="396">Sets the description for @self.</doc>
        <source-position filename="../src/hdy-status-page.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="398">a #HdyStatusPage</doc>
            <type name="StatusPage" c:type="HdyStatusPage*"/>
          </instance-parameter>
          <parameter name="description"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="399">the description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="hdy_status_page_set_icon_name"
              glib:set-property="icon-name"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="307">Sets the icon name for @self.</doc>
        <source-position filename="../src/hdy-status-page.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="309">a #HdyStatusPage</doc>
            <type name="StatusPage" c:type="HdyStatusPage*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="310">the icon name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_status_page_set_title"
              glib:set-property="title"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="354">Sets the title for @self.</doc>
        <source-position filename="../src/hdy-status-page.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="356">a #HdyStatusPage</doc>
            <type name="StatusPage" c:type="HdyStatusPage*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-status-page.c"
                 line="357">the title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="description"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="240">The description to be displayed below the title.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="212">The name of the icon to be used.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="../src/hdy-status-page.c"
             line="226">The title to be displayed below the icon.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="StatusPageClass"
            c:type="HdyStatusPageClass"
            glib:is-gtype-struct-for="StatusPage">
      <source-position filename="../src/hdy-status-page.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="StyleManager"
           c:symbol-prefix="style_manager"
           c:type="HdyStyleManager"
           parent="GObject.Object"
           glib:type-name="HdyStyleManager"
           glib:get-type="hdy_style_manager_get_type"
           glib:type-struct="StyleManagerClass">
      <source-position filename="../src/hdy-style-manager.h" line="33"/>
      <function name="get_default"
                c:identifier="hdy_style_manager_get_default"
                version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="674">Gets the default #HdyStyleManager instance.

It manages all #GdkDisplay instances unless the style manager for that
display has an override.

See hdy_style_manager_get_for_display().</doc>
        <source-position filename="../src/hdy-style-manager.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-style-manager.c"
               line="684">the default style manager</doc>
          <type name="StyleManager" c:type="HdyStyleManager*"/>
        </return-value>
      </function>
      <function name="get_for_display"
                c:identifier="hdy_style_manager_get_for_display"
                version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="697">Gets the #HdyStyleManager instance managing @display.

It can be used to override styles for that specific display instead of the
whole application.

Most applications should use hdy_style_manager_get_default() instead.</doc>
        <source-position filename="../src/hdy-style-manager.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-style-manager.c"
               line="708">the style manager for @display</doc>
          <type name="StyleManager" c:type="HdyStyleManager*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="699">a #GdkDisplay</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_color_scheme"
              c:identifier="hdy_style_manager_get_color_scheme"
              glib:get-property="color-scheme"
              version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="746">Gets the requested application color scheme.</doc>
        <source-position filename="../src/hdy-style-manager.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-style-manager.c"
               line="752">the color scheme</doc>
          <type name="ColorScheme" c:type="HdyColorScheme"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="748">a #HdyStyleManager</doc>
            <type name="StyleManager" c:type="HdyStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dark"
              c:identifier="hdy_style_manager_get_dark"
              glib:get-property="dark"
              version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="826">Gets whether the application is using dark appearance.</doc>
        <source-position filename="../src/hdy-style-manager.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-style-manager.c"
               line="832">whether the application is using dark appearance</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="828">a #HdyStyleManager</doc>
            <type name="StyleManager" c:type="HdyStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display"
              c:identifier="hdy_style_manager_get_display"
              glib:get-property="display"
              version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="725">Gets the display the style manager is associated with.

The display will be %NULL for the style manager returned by
hdy_style_manager_get_default().</doc>
        <source-position filename="../src/hdy-style-manager.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-style-manager.c"
               line="734">(nullable): the display</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="727">a #HdyStyleManager</doc>
            <type name="StyleManager" c:type="HdyStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_high_contrast"
              c:identifier="hdy_style_manager_get_high_contrast"
              glib:get-property="high-contrast"
              version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="844">Gets whether the application is using high contrast appearance.</doc>
        <source-position filename="../src/hdy-style-manager.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-style-manager.c"
               line="850">whether the application is using high contrast appearance</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="846">a #HdyStyleManager</doc>
            <type name="StyleManager" c:type="HdyStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_supports_color_schemes"
              c:identifier="hdy_style_manager_get_system_supports_color_schemes"
              glib:get-property="system-supports-color-schemes"
              version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="808">Gets whether the system supports color schemes.</doc>
        <source-position filename="../src/hdy-style-manager.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-style-manager.c"
               line="814">whether the system supports color schemes</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="810">a #HdyStyleManager</doc>
            <type name="StyleManager" c:type="HdyStyleManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color_scheme"
              c:identifier="hdy_style_manager_set_color_scheme"
              glib:set-property="color-scheme"
              version="1.6">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="764">Sets the requested application color scheme.

The effective appearance will be decided based on the application color
scheme and the system preferred color scheme. The #HdyStyleManager:dark
property can be used to query the current effective appearance.</doc>
        <source-position filename="../src/hdy-style-manager.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="766">a #HdyStyleManager</doc>
            <type name="StyleManager" c:type="HdyStyleManager*"/>
          </instance-parameter>
          <parameter name="color_scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-style-manager.c"
                 line="767">the color scheme</doc>
            <type name="ColorScheme" c:type="HdyColorScheme"/>
          </parameter>
        </parameters>
      </method>
      <property name="color-scheme"
                version="1.6"
                writable="1"
                transfer-ownership="none"
                setter="set_color_scheme"
                getter="get_color_scheme">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="540">The requested application color scheme.

The effective appearance will be decided based on the application color
scheme and the system preferred color scheme. The #HdyStyleManager:dark
property can be used to query the current effective appearance.

The %HDY_COLOR_SCHEME_PREFER_LIGHT color scheme results in the application
using light appearance unless the system prefers dark colors. This is the
default value.

The %HDY_COLOR_SCHEME_PREFER_DARK color scheme results in the application
using dark appearance, but can still switch to the light appearance if the
system can prefers it, for example, when the high contrast preference is
enabled.

The %HDY_COLOR_SCHEME_FORCE_LIGHT and %HDY_COLOR_SCHEME_FORCE_DARK values
ignore the system preference entirely, they are useful if the application
wants to match its UI to its content or to provide a separate color scheme
switcher.

If a per-#GdkDisplay style manager has its color scheme set to
%HDY_COLOR_SCHEME_DEFAULT, it will inherit the color scheme from the
default style manager.

For the default style manager, %HDY_COLOR_SCHEME_DEFAULT is equivalent to
%HDY_COLOR_SCHEME_FORCE_LIGHT.

The #HdyStyleManager:system-supports-color-schemes property can be used to
check if the current environment provides a color scheme dddpreference.</doc>
        <type name="ColorScheme"/>
      </property>
      <property name="dark"
                version="1.6"
                transfer-ownership="none"
                getter="get_dark">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="605">Whether the application is using dark appearance.

This property can be used to query the current appearance, as requested via
#HdyStyleManager:color-scheme.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="display"
                version="1.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_display">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="523">The display the style manager is associated with.

The display will be %NULL for the style manager returned by
hdy_style_manager_get_default().</doc>
        <type name="Gdk.Display"/>
      </property>
      <property name="high-contrast"
                version="1.6"
                transfer-ownership="none"
                getter="get_high_contrast">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="622">Whether the application is using high contrast appearance.

This cannot be overridden by applications.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="system-supports-color-schemes"
                version="1.6"
                transfer-ownership="none"
                getter="get_system_supports_color_schemes">
        <doc xml:space="preserve"
             filename="../src/hdy-style-manager.c"
             line="583">Whether the system supports color schemes.

This property can be used to check if the current environment provides a
color scheme preference. For example, applications might want to show a
separate appearance switcher if it's set to %FALSE.

It's only set at startup and cannot change its value later.

See #HdyStyleManager:color-scheme.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="StyleManagerClass"
            c:type="HdyStyleManagerClass"
            glib:is-gtype-struct-for="StyleManager">
      <source-position filename="../src/hdy-style-manager.h" line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SwipeGroup"
           c:symbol-prefix="swipe_group"
           c:type="HdySwipeGroup"
           parent="GObject.Object"
           glib:type-name="HdySwipeGroup"
           glib:get-type="hdy_swipe_group_get_type"
           glib:type-struct="SwipeGroupClass">
      <source-position filename="../src/hdy-swipe-group.h" line="23"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_swipe_group_new"
                   version="0.0.12"
                   deprecated="1"
                   deprecated-version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-group.c"
             line="98">Create a new #HdySwipeGroup object.</doc>
        <source-position filename="../src/hdy-swipe-group.h" line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-group.c"
               line="103">The newly created #HdySwipeGroup object</doc>
          <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
        </return-value>
      </constructor>
      <method name="add_swipeable"
              c:identifier="hdy_swipe_group_add_swipeable"
              version="0.0.12"
              deprecated="1"
              deprecated-version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-group.c"
             line="222">When the widget is destroyed or no longer referenced elsewhere, it will
be removed from the swipe group.</doc>
        <source-position filename="../src/hdy-swipe-group.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-group.c"
                 line="224">a #HdySwipeGroup</doc>
            <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
          </instance-parameter>
          <parameter name="swipeable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-group.c"
                 line="225">the #HdySwipeable to add</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_swipeables"
              c:identifier="hdy_swipe_group_get_swipeables"
              version="0.0.12"
              deprecated="1"
              deprecated-version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-group.c"
             line="292">Returns the list of swipeables associated with @self.</doc>
        <source-position filename="../src/hdy-swipe-group.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-group.c"
               line="298">a #GSList of
  swipeables. The list is owned by libhandy and should not be modified.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Swipeable"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-group.c"
                 line="294">a #HdySwipeGroup</doc>
            <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_swipeable"
              c:identifier="hdy_swipe_group_remove_swipeable"
              version="0.0.12"
              deprecated="1"
              deprecated-version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-group.c"
             line="260">Removes a widget from a #HdySwipeGroup.</doc>
        <source-position filename="../src/hdy-swipe-group.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-group.c"
                 line="262">a #HdySwipeGroup</doc>
            <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
          </instance-parameter>
          <parameter name="swipeable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-group.c"
                 line="263">the #HdySwipeable to remove</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SwipeGroupClass"
            c:type="HdySwipeGroupClass"
            glib:is-gtype-struct-for="SwipeGroup">
      <source-position filename="../src/hdy-swipe-group.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SwipeTracker"
           c:symbol-prefix="swipe_tracker"
           c:type="HdySwipeTracker"
           parent="GObject.Object"
           glib:type-name="HdySwipeTracker"
           glib:get-type="hdy_swipe_tracker_get_type"
           glib:type-struct="SwipeTrackerClass">
      <source-position filename="../src/hdy-swipe-tracker.h" line="23"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="hdy_swipe_tracker_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1208">Create a new #HdySwipeTracker object on @widget.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-tracker.c"
               line="1214">the newly created #HdySwipeTracker object</doc>
          <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
        </return-value>
        <parameters>
          <parameter name="swipeable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1210">a #GtkWidget to add the tracker on</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_allow_long_swipes"
              c:identifier="hdy_swipe_tracker_get_allow_long_swipes"
              glib:get-property="allow-long-swipes"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1384">Whether to allow swiping for more than one snap point at a time. If the
value is %FALSE, each swipe can only move to the adjacent snap points.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-tracker.c"
               line="1391">%TRUE if long swipes are allowed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1386">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_mouse_drag"
              c:identifier="hdy_swipe_tracker_get_allow_mouse_drag"
              glib:get-property="allow-mouse-drag"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1337">Get whether @self can be dragged with mouse pointer.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-tracker.c"
               line="1343">%TRUE is mouse dragging is allowed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1339">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="hdy_swipe_tracker_get_enabled"
              glib:get-property="enabled"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1246">Get whether @self is enabled. When it's not enabled, no events will be
processed. Generally widgets will want to expose this via a property.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-tracker.c"
               line="1253">%TRUE if @self is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1248">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reversed"
              c:identifier="hdy_swipe_tracker_get_reversed"
              glib:get-property="reversed"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1294">Get whether @self is reversing the swipe direction.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-tracker.c"
               line="1300">%TRUE is the direction is reversed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1296">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swipeable"
              c:identifier="hdy_swipe_tracker_get_swipeable"
              glib:get-property="swipeable"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1228">Get @self's swipeable widget.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipe-tracker.c"
               line="1234">the swipeable widget</doc>
          <type name="Swipeable" c:type="HdySwipeable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1230">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_long_swipes"
              c:identifier="hdy_swipe_tracker_set_allow_long_swipes"
              glib:set-property="allow-long-swipes"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1403">Sets whether to allow swiping for more than one snap point at a time. If the
value is %FALSE, each swipe can only move to the adjacent snap points.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1405">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
          <parameter name="allow_long_swipes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1406">whether to allow long swipes</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_mouse_drag"
              c:identifier="hdy_swipe_tracker_set_allow_mouse_drag"
              glib:set-property="allow-mouse-drag"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1355">Set whether @self can be dragged with mouse pointer. This should usually be
%FALSE.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1357">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
          <parameter name="allow_mouse_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1358">whether to allow mouse dragging</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="hdy_swipe_tracker_set_enabled"
              glib:set-property="enabled"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1265">Set whether @self is enabled. When it's not enabled, no events will be
processed. Usually widgets will want to expose this via a property.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1267">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1268">whether to enable to swipe tracker</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reversed"
              c:identifier="hdy_swipe_tracker_set_reversed"
              glib:set-property="reversed"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1312">Set whether to reverse the swipe direction. If @self is horizontal,
can be used for supporting RTL text direction.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1314">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
          <parameter name="reversed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1315">whether to reverse the swipe direction</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="shift_position"
              c:identifier="hdy_swipe_tracker_shift_position"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1429">Move the current progress value by @delta. This can be used to adjust the
current position if snap points move during the gesture.</doc>
        <source-position filename="../src/hdy-swipe-tracker.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1431">a #HdySwipeTracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </instance-parameter>
          <parameter name="delta" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1432">the position delta</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-long-swipes"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_long_swipes"
                getter="get_allow_long_swipes">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1113">Whether to allow swiping for more than one snap point at a time. If the
value is %FALSE, each swipe can only move to the adjacent snap points.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="allow-mouse-drag"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_mouse_drag"
                getter="get_allow_mouse_drag">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1098">Whether to allow dragging with mouse pointer. This should usually be
%FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enabled"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1068">Whether the swipe tracker is enabled. When it's not enabled, no events
will be processed. Usually widgets will want to expose this via a property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="reversed"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_reversed"
                getter="get_reversed">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1083">Whether to reverse the swipe direction. If the swipe tracker is horizontal,
it can be used for supporting RTL text direction.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="swipeable"
                version="1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_swipeable">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1054">The widget the swipe tracker is attached to. Must not be %NULL.</doc>
        <type name="Swipeable"/>
      </property>
      <glib:signal name="begin-swipe" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1134">This signal is emitted when a possible swipe is detected.

The @direction value can be used to restrict the swipe to a certain
direction.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1137">The direction of the swipe</doc>
            <type name="NavigationDirection"/>
          </parameter>
          <parameter name="direct" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1138">%TRUE if the swipe is directly triggered by a gesture,
  %FALSE if it's triggered via a #HdySwipeGroup</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="end-swipe" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1177">This signal is emitted as soon as the gesture has stopped.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1180">Snap-back animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1181">The progress value to animate to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-swipe" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipe-tracker.c"
             line="1158">This signal is emitted every time the progress value changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipe-tracker.c"
                 line="1161">The current animation progress value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SwipeTrackerClass"
            c:type="HdySwipeTrackerClass"
            glib:is-gtype-struct-for="SwipeTracker">
      <source-position filename="../src/hdy-swipe-tracker.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="Swipeable"
               c:symbol-prefix="swipeable"
               c:type="HdySwipeable"
               glib:type-name="HdySwipeable"
               glib:get-type="hdy_swipeable_get_type"
               glib:type-struct="SwipeableInterface">
      <source-position filename="../src/hdy-swipeable.h" line="62"/>
      <prerequisite name="Gtk.Widget"/>
      <virtual-method name="get_cancel_progress"
                      invoker="get_cancel_progress"
                      version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="207">Gets the progress @self will snap back to after the gesture is canceled.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="213">the cancel progress, unitless</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="209">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_distance" invoker="get_distance" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="133">Gets the swipe distance of @self. This corresponds to how many pixels
1 unit represents.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="140">the swipe distance in pixels</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="135">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress" invoker="get_progress" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="184">Gets the current progress of @self</doc>
        <source-position filename="../src/hdy-swipeable.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="190">the current progress, unitless</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="186">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_snap_points"
                      invoker="get_snap_points"
                      version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="157">Gets the snap points of @self. Each snap point represents a progress value
that is considered acceptable to end the swipe on.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="165">the snap points of
    @self. The array must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="gdouble*">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="159">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="n_snap_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="160">location to return the number of the snap points</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_swipe_area"
                      invoker="get_swipe_area"
                      version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="230">Gets the area @self can start a swipe from for the given direction and
gesture type.
This can be used to restrict swipes to only be possible from a certain area,
for example, to only allow edge swipes, or to have a draggable element and
ignore swipes elsewhere.

Swipe area is only considered for direct swipes (as in, not initiated by
#HdySwipeGroup).

If not implemented, the default implementation returns the allocation of
@self, allowing swipes from anywhere.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="232">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="navigation_direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="233">the direction of the swipe</doc>
            <type name="NavigationDirection" c:type="HdyNavigationDirection"/>
          </parameter>
          <parameter name="is_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="234">whether the swipe is caused by a dragging gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="235">a pointer to a #GdkRectangle to store the swipe area</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_swipe_tracker"
                      invoker="get_swipe_tracker"
                      version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="110">Gets the #HdySwipeTracker used by this swipeable widget.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="116">the swipe tracker</doc>
          <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="112">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="switch_child" invoker="switch_child" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="62">See HdySwipeable::child-switched.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="64">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="65">the index of the child to switch to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="66">Animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_child_switched"
              c:identifier="hdy_swipeable_emit_child_switched"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="87">Emits HdySwipeable::child-switched signal. This should be called when the
widget switches visible child widget.

@duration can be 0 if the child is switched without animation.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="89">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="90">the index of the child to switch to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="91">Animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cancel_progress"
              c:identifier="hdy_swipeable_get_cancel_progress"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="207">Gets the progress @self will snap back to after the gesture is canceled.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="213">the cancel progress, unitless</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="209">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distance"
              c:identifier="hdy_swipeable_get_distance"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="133">Gets the swipe distance of @self. This corresponds to how many pixels
1 unit represents.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="140">the swipe distance in pixels</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="135">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="hdy_swipeable_get_progress"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="184">Gets the current progress of @self</doc>
        <source-position filename="../src/hdy-swipeable.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="190">the current progress, unitless</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="186">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap_points"
              c:identifier="hdy_swipeable_get_snap_points"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="157">Gets the snap points of @self. Each snap point represents a progress value
that is considered acceptable to end the swipe on.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="165">the snap points of
    @self. The array must be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="gdouble*">
            <type name="gdouble" c:type="gdouble"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="159">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="n_snap_points"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="160">location to return the number of the snap points</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_swipe_area"
              c:identifier="hdy_swipeable_get_swipe_area"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="230">Gets the area @self can start a swipe from for the given direction and
gesture type.
This can be used to restrict swipes to only be possible from a certain area,
for example, to only allow edge swipes, or to have a draggable element and
ignore swipes elsewhere.

Swipe area is only considered for direct swipes (as in, not initiated by
#HdySwipeGroup).

If not implemented, the default implementation returns the allocation of
@self, allowing swipes from anywhere.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="232">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="navigation_direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="233">the direction of the swipe</doc>
            <type name="NavigationDirection" c:type="HdyNavigationDirection"/>
          </parameter>
          <parameter name="is_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="234">whether the swipe is caused by a dragging gesture</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="235">a pointer to a #GdkRectangle to store the swipe area</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_swipe_tracker"
              c:identifier="hdy_swipeable_get_swipe_tracker"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="110">Gets the #HdySwipeTracker used by this swipeable widget.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-swipeable.c"
               line="116">the swipe tracker</doc>
          <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="112">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="switch_child"
              c:identifier="hdy_swipeable_switch_child"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="62">See HdySwipeable::child-switched.</doc>
        <source-position filename="../src/hdy-swipeable.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="64">a #HdySwipeable</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="65">the index of the child to switch to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="66">Animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="child-switched" when="first" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.c"
             line="37">This signal should be emitted when the widget's visible child is changed.

@duration can be 0 if the child is switched without animation.

This is used by #HdySwipeGroup, applications should not connect to it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="40">the index of the child to switch to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="41">Animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SwipeableInterface"
            c:type="HdySwipeableInterface"
            glib:is-gtype-struct-for="Swipeable"
            version="1.0">
      <doc xml:space="preserve"
           filename="../src/hdy-swipeable.h"
           line="26">An interface for swipeable widgets.</doc>
      <source-position filename="../src/hdy-swipeable.h" line="62"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="../src/hdy-swipeable.h"
             line="28">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="switch_child">
        <callback name="switch_child">
          <source-position filename="../src/hdy-swipeable.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="64">a #HdySwipeable</doc>
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="65">the index of the child to switch to</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="duration" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="66">Animation duration in milliseconds</doc>
              <type name="gint64" c:type="gint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_swipe_tracker">
        <callback name="get_swipe_tracker">
          <source-position filename="../src/hdy-swipeable.h" line="49"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="116">the swipe tracker</doc>
            <type name="SwipeTracker" c:type="HdySwipeTracker*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="112">a #HdySwipeable</doc>
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_distance">
        <callback name="get_distance">
          <source-position filename="../src/hdy-swipeable.h" line="50"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="140">the swipe distance in pixels</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="135">a #HdySwipeable</doc>
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_snap_points">
        <callback name="get_snap_points">
          <source-position filename="../src/hdy-swipeable.h" line="51"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="165">the snap points of
    @self. The array must be freed with g_free().</doc>
            <array length="1" zero-terminated="0" c:type="gdouble*">
              <type name="gdouble" c:type="gdouble"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="159">a #HdySwipeable</doc>
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
            <parameter name="n_snap_points"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="160">location to return the number of the snap points</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress">
        <callback name="get_progress">
          <source-position filename="../src/hdy-swipeable.h" line="53"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="190">the current progress, unitless</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="186">a #HdySwipeable</doc>
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cancel_progress">
        <callback name="get_cancel_progress">
          <source-position filename="../src/hdy-swipeable.h" line="54"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-swipeable.c"
                 line="213">the cancel progress, unitless</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="209">a #HdySwipeable</doc>
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_swipe_area">
        <callback name="get_swipe_area">
          <source-position filename="../src/hdy-swipeable.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="232">a #HdySwipeable</doc>
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
            <parameter name="navigation_direction" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="233">the direction of the swipe</doc>
              <type name="NavigationDirection"
                    c:type="HdyNavigationDirection"/>
            </parameter>
            <parameter name="is_drag" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="234">whether the swipe is caused by a dragging gesture</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="rect"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/hdy-swipeable.c"
                   line="235">a pointer to a #GdkRectangle to store the swipe area</doc>
              <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="TabBar"
           c:symbol-prefix="tab_bar"
           c:type="HdyTabBar"
           parent="Gtk.Bin"
           glib:type-name="HdyTabBar"
           glib:get-type="hdy_tab_bar_get_type"
           glib:type-struct="TabBarClass">
      <source-position filename="../src/hdy-tab-bar.h" line="26"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_tab_bar_new" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="784">Creates a new #HdyTabBar widget.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="789">a new #HdyTabBar</doc>
          <type name="TabBar" c:type="HdyTabBar*"/>
        </return-value>
      </constructor>
      <method name="get_autohide"
              c:identifier="hdy_tab_bar_get_autohide"
              glib:get-property="autohide"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="999">Gets whether the tabs automatically hide, see hdy_tab_bar_set_autohide().</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="1005">whether the tabs automatically hide</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1001">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end_action_widget"
              c:identifier="hdy_tab_bar_get_end_action_widget"
              glib:get-property="end-action-widget"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="947">Gets the widget shown after the tabs.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="953">the widget shown after the tabs, or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="949">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expand_tabs"
              c:identifier="hdy_tab_bar_get_expand_tabs"
              glib:get-property="expand-tabs"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1069">Gets whether tabs should expand, see hdy_tab_bar_set_expand_tabs().</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="1075">whether tabs should expand</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1071">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extra_drag_dest_targets"
              c:identifier="hdy_tab_bar_get_extra_drag_dest_targets"
              glib:get-property="extra-drag-dest-targets"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1164">Gets extra drag destination targets, see
hdy_tab_bar_set_extra_drag_dest_targets().</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="71"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="1171">extra drag targets, or %NULL</doc>
          <type name="Gtk.TargetList" c:type="GtkTargetList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1166">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_inverted"
              c:identifier="hdy_tab_bar_get_inverted"
              glib:get-property="inverted"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1118">Gets whether tabs use inverted layout, see hdy_tab_bar_set_inverted().</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="1124">whether tabs use inverted layout</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1120">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_overflowing"
              c:identifier="hdy_tab_bar_get_is_overflowing"
              glib:get-property="is-overflowing"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1224">Gets whether @self is overflowing.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="1230">whether @self is overflowing</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1226">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_action_widget"
              c:identifier="hdy_tab_bar_get_start_action_widget"
              glib:get-property="start-action-widget"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="895">Gets the widget shown before the tabs.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="901">the widget shown before the tabs, or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="897">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tabs_revealed"
              c:identifier="hdy_tab_bar_get_tabs_revealed"
              glib:get-property="tabs-revealed"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1051">Gets the value of the #HdyTabBar:tabs-revealed property.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="1057">whether the tabs are current revealed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1053">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view"
              c:identifier="hdy_tab_bar_get_view"
              glib:get-property="view"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="799">Gets the #HdyTabView @self controls.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="32"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-bar.c"
               line="805">the #HdyTabView @self controls</doc>
          <type name="TabView" c:type="HdyTabView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="801">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autohide"
              c:identifier="hdy_tab_bar_set_autohide"
              glib:set-property="autohide"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1017">Sets whether the tabs automatically hide.

If @autohide is %TRUE, the tab bar disappears when the associated #HdyTabView
has 0 or 1 tab, no pinned tabs, and no tab is being transferred.

Autohide is enabled by default.

See #HdyTabBar:tabs-revealed.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1019">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
          <parameter name="autohide" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1020">whether the tabs automatically hide</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_end_action_widget"
              c:identifier="hdy_tab_bar_set_end_action_widget"
              glib:set-property="end-action-widget"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="965">Sets the widget to show after the tabs.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="967">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="968">the widget to show after the tabs, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expand_tabs"
              c:identifier="hdy_tab_bar_set_expand_tabs"
              glib:set-property="expand-tabs"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1087">Sets whether tabs should expand.

If @expand_tabs is %TRUE, the tabs will always vary width filling the whole
width when possible, otherwise tabs will always have the minimum possible
size.

Expand is enabled by default.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1089">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
          <parameter name="expand_tabs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1090">whether to expand tabs</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extra_drag_dest_targets"
              c:identifier="hdy_tab_bar_set_extra_drag_dest_targets"
              glib:set-property="extra-drag-dest-targets"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1183">Sets extra drag destination targets.

This allows to drag arbitrary content onto tabs, for example URLs in a web
browser.

If a tab is hovered for a certain period of time while dragging the content,
it will be automatically selected.

After content is dropped, the #HdyTabBar::extra-drag-data-received signal can
be used to retrieve and process the drag data.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1185">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
          <parameter name="extra_drag_dest_targets"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1186">extra drag targets, or %NULL</doc>
            <type name="Gtk.TargetList" c:type="GtkTargetList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_inverted"
              c:identifier="hdy_tab_bar_set_inverted"
              glib:set-property="inverted"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="1136">Sets whether tabs tabs use inverted layout.

If @inverted is %TRUE, non-pinned tabs will have the close button at the
beginning and the indicator at the end rather than the opposite.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1138">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
          <parameter name="inverted" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="1139">whether tabs use inverted layout</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_action_widget"
              c:identifier="hdy_tab_bar_set_start_action_widget"
              glib:set-property="start-action-widget"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="913">Sets the widget to show before the tabs.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="915">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="916">the widget to show before the tabs, or %NULL</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view"
              c:identifier="hdy_tab_bar_set_view"
              glib:set-property="view"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="817">Sets the #HdyTabView @self controls.</doc>
        <source-position filename="../src/hdy-tab-bar.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="819">a #HdyTabBar</doc>
            <type name="TabBar" c:type="HdyTabBar*"/>
          </instance-parameter>
          <parameter name="view"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="820">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </parameter>
        </parameters>
      </method>
      <property name="autohide"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_autohide"
                getter="get_autohide">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="550">Whether tabs automatically hide.

If set to %TRUE, the tab bar disappears when the associated #HdyTabView
has 0 or 1 tab, no pinned tabs, and no tab is being transferred.

See #HdyTabBar:tabs-revealed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="end-action-widget"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_end_action_widget"
                getter="get_end_action_widget">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="536">The widget shown after the tabs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="expand-tabs"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_expand_tabs"
                getter="get_expand_tabs">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="585">Whether tabs should expand.

If set to %TRUE, the tabs will always vary width filling the whole width
when possible, otherwise tabs will always have the minimum possible size.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="extra-drag-dest-targets"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_extra_drag_dest_targets"
                getter="get_extra_drag_dest_targets">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="619">Extra drag destination targets.

Allows to drag arbitrary content onto tabs, for example URLs in a web
browser.

If a tab is hovered for a certain period of time while dragging the
content, it will be automatically selected.

After content is dropped, the #HdyTabBar::extra-drag-data-received signal
can be used to retrieve and process the drag data.</doc>
        <type name="Gtk.TargetList"/>
      </property>
      <property name="inverted"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_inverted"
                getter="get_inverted">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="602">Whether tabs use inverted layout.

If set to %TRUE, non-pinned tabs will have the close button at the
beginning and the indicator at the end rather than the opposite.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-overflowing"
                version="1.2"
                transfer-ownership="none"
                getter="get_is_overflowing">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="642">Whether the tab bar is overflowing.

If set to %TRUE, all tabs cannot be displayed at once and require
scrolling.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="start-action-widget"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_start_action_widget"
                getter="get_start_action_widget">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="522">The widget shown before the tabs.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="tabs-revealed"
                version="1.2"
                transfer-ownership="none"
                getter="get_tabs_revealed">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="569">Whether tabs are currently revealed.

See HdyTabBar:autohide.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="view"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_view"
                getter="get_view">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="508">The #HdyTabView the tab bar controls.</doc>
        <type name="TabView"/>
      </property>
      <glib:signal name="extra-drag-data-received" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-bar.c"
             line="661">This signal is emitted when content allowed via
#HdyTabBar:extra-drag-dest-targets is dropped onto a tab.

See #GtkWidget::drag-data-received.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="664">the #HdyTabPage matching the tab the content was dropped onto</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="665">the drag context</doc>
            <type name="Gdk.DragContext"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="666">the received data</doc>
            <type name="Gtk.SelectionData"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="667">the info that has been registered with the target in the #GtkTargetList</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-bar.c"
                 line="668">the timestamp at which the data was received</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TabBarClass"
            c:type="HdyTabBarClass"
            glib:is-gtype-struct-for="TabBar">
      <source-position filename="../src/hdy-tab-bar.h" line="26"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="TabPage"
           c:symbol-prefix="tab_page"
           c:type="HdyTabPage"
           parent="GObject.Object"
           glib:type-name="HdyTabPage"
           glib:get-type="hdy_tab_page_get_type"
           glib:type-struct="TabPageClass">
      <source-position filename="../src/hdy-tab-view.h" line="24"/>
      <method name="get_child"
              c:identifier="hdy_tab_page_get_child"
              glib:get-property="child"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1464">Gets the child of @self.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1470">the child of @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1466">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="hdy_tab_page_get_icon"
              glib:get-property="icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1628">Gets the icon of @self, see hdy_tab_page_set_icon().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1634">the icon of @self</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1630">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indicator_activatable"
              c:identifier="hdy_tab_page_get_indicator_activatable"
              glib:get-property="indicator-activatable"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1773">Gets whether the indicator of @self is activatable, see
hdy_tab_page_set_indicator_activatable().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1781">whether the indicator is activatable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1775">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indicator_icon"
              c:identifier="hdy_tab_page_get_indicator_icon"
              glib:get-property="indicator-icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1721">Gets the indicator icon of @self, see hdy_tab_page_set_indicator_icon().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="63"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1727">the indicator icon of @self</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1723">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loading"
              c:identifier="hdy_tab_page_get_loading"
              glib:get-property="loading"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1673">Gets whether @self is loading, see hdy_tab_page_set_loading().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1679">whether @self is loading</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1675">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_attention"
              c:identifier="hdy_tab_page_get_needs_attention"
              glib:get-property="needs-attention"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1823">Gets whether @self needs attention, see hdy_tab_page_set_needs_attention().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1829">whether @self needs attention</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1825">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="hdy_tab_page_get_parent"
              glib:get-property="parent"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1482">Gets the parent page of @self, or %NULL if the @self does not have a parent.

See hdy_tab_view_add_page() and hdy_tab_view_close_page().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="30"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1490">the parent page of @self, or %NULL</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1484">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pinned"
              c:identifier="hdy_tab_page_get_pinned"
              glib:get-property="pinned"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1520">Gets whether @self is pinned. See hdy_tab_view_set_page_pinned().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1526">whether @self is pinned</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1522">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected"
              c:identifier="hdy_tab_page_get_selected"
              glib:get-property="selected"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1502">Gets whether @self is selected. See hdy_tab_view_set_selected_page().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1508">whether @self is selected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1504">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_tab_page_get_title"
              glib:get-property="title"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1538">Gets the title of @self, see hdy_tab_page_set_title().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="39"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1544">the title of @self</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1540">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tooltip"
              c:identifier="hdy_tab_page_get_tooltip"
              glib:get-property="tooltip"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1584">Gets the tooltip of @self, see hdy_tab_page_set_tooltip().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="45"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1590">the tooltip of @self</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1586">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="hdy_tab_page_set_icon"
              glib:set-property="icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1646">Sets the icon of @self, displayed next to the title.

#HdyTabBar will not show the icon if #HdyTabPage:loading is set to %TRUE,
or if @self is pinned and #HdyTabPage:indicator-icon is set.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1648">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1649">the icon of @self</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indicator_activatable"
              c:identifier="hdy_tab_page_set_indicator_activatable"
              glib:set-property="indicator-activatable"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1793">sets whether the indicator of @self is activatable.

If set to %TRUE, #HdyTabView::indicator-activated will be emitted when
the indicator is clicked.

If #HdyTabPage:indicator-icon is not set, does nothing.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1795">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
          <parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1796">whether the indicator is activatable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indicator_icon"
              c:identifier="hdy_tab_page_set_indicator_icon"
              glib:set-property="indicator-icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1739">Sets the indicator icon of @self.

A common use case is an audio or camera indicator in a web browser.

#HdyTabPage will show it at the beginning of the tab, alongside icon
representing #HdyTabPage:icon or loading spinner.

If the page is pinned, the indicator will be shown instead of icon or spinner.

If #HdyTabPage:indicator-activatable is set to %TRUE, indicator icon
can act as a button.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1741">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
          <parameter name="indicator_icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1742">the indicator icon of @self</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loading"
              c:identifier="hdy_tab_page_set_loading"
              glib:set-property="loading"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1691">Sets wether @self is loading.

If set to %TRUE, #HdyTabBar will display a spinner in place of icon.

If @self is pinned and #HdyTabPage:indicator-icon is set, the loading status
will not be visible.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1693">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
          <parameter name="loading" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1694">whether @self is loading</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_needs_attention"
              c:identifier="hdy_tab_page_set_needs_attention"
              glib:set-property="needs-attention"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1841">Sets whether @self needs attention.

#HdyTabBar will display a glow under the tab representing @self if set to
%TRUE. If the tab is not visible, the corresponding edge of the tab bar will
be highlighted.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1843">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
          <parameter name="needs_attention" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1844">whether @self needs attention</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_tab_page_set_title"
              glib:set-property="title"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1556">Sets the title of @self.

#HdyTabBar will display it in the center of the tab representing @self
unless it's pinned, and will use it as a tooltip unless #HdyTabPage:tooltip
is set.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1558">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1559">the title of @self</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tooltip"
              c:identifier="hdy_tab_page_set_tooltip"
              glib:set-property="tooltip"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1602">Sets the tooltip of @self, marked up with the Pango text markup language.

If not set, #HdyTabBar will use #HdyTabPage:title as a tooltip instead.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1604">a #HdyTabPage</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </instance-parameter>
          <parameter name="tooltip"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1605">the tooltip of @self</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="362">The child of the page.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="icon"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_icon"
                getter="get_icon">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="453">The icon of the page, displayed next to the title.

#HdyTabBar will not show the icon if #HdyTabPage:loading is set to %TRUE,
or if the page is pinned and #HdyTabPage:indicator-icon is set.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="indicator-activatable"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_indicator_activatable"
                getter="get_indicator_activatable">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="514">Whether the indicator icon is activatable.

If set to %TRUE, #HdyTabView::indicator-activated will be emitted when
the indicator icon is clicked.

If #HdyTabPage:indicator-icon is not set, does nothing.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="indicator-icon"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_indicator_icon"
                getter="get_indicator_icon">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="489">An indicator icon for the page.

A common use case is an audio or camera indicator in a web browser.

#HdyTabPage will show it at the beginning of the tab, alongside icon
representing #HdyTabPage:icon or loading spinner.

If the page is pinned, the indicator will be shown instead of icon or
spinner.

If #HdyTabPage:indicator-activatable is set to %TRUE, the indicator icon
can act as a button.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="loading"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_loading"
                getter="get_loading">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="470">Whether the page is loading.

If set to %TRUE, #HdyTabBar will display a spinner in place of icon.

If the page is pinned and #HdyTabPage:indicator-icon is set, the loading
status will not be visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="needs-attention"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_needs_attention"
                getter="get_needs_attention">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="533">Whether the page needs attention.

#HdyTabBar will display a glow under the tab representing the page if set
to %TRUE. If the tab is not visible, the corresponding edge of the tab bar
will be highlighted.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="parent"
                version="1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_parent">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="376">The parent page of the page.

See hdy_tab_view_add_page() and hdy_tab_view_close_page().</doc>
        <type name="TabPage"/>
      </property>
      <property name="pinned"
                version="1.2"
                transfer-ownership="none"
                getter="get_pinned">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="406">Whether the page is pinned. See hdy_tab_view_set_page_pinned().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="selected"
                version="1.2"
                transfer-ownership="none"
                getter="get_selected">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="392">Whether the page is selected.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="420">The title of the page.

#HdyTabBar will display it in the center of the tab unless it's pinned,
and will use it as a tooltip unless #HdyTabPage:tooltip is set.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tooltip"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_tooltip"
                getter="get_tooltip">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="437">The tooltip of the page, marked up with the Pango text markup language.

If not set, #HdyTabBar will use #HdyTabPage:title as a tooltip instead.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TabPageClass"
            c:type="HdyTabPageClass"
            glib:is-gtype-struct-for="TabPage">
      <source-position filename="../src/hdy-tab-view.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="TabView"
           c:symbol-prefix="tab_view"
           c:type="HdyTabView"
           parent="Gtk.Bin"
           glib:type-name="HdyTabView"
           glib:get-type="hdy_tab_view_get_type"
           glib:type-struct="TabViewClass">
      <source-position filename="../src/hdy-tab-view.h" line="83"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_tab_view_new" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1870">Creates a new #HdyTabView widget.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1875">a new #HdyTabView</doc>
          <type name="TabView" c:type="HdyTabView*"/>
        </return-value>
      </constructor>
      <method name="add_page"
              c:identifier="hdy_tab_view_add_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2466">Adds @child to @self with @parent as the parent.

This function can be used to automatically position new pages, and to select
the correct page when this page is closed while being selected (see
hdy_tab_view_close_page()).

If @parent is %NULL, this function is equivalent to hdy_tab_view_append().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2480">the page object representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2468">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2469">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2470">a parent page for @child, or %NULL</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append" c:identifier="hdy_tab_view_append" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2569">Inserts @child as the last non-pinned page.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2576">the page object representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2571">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2572">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_pinned"
              c:identifier="hdy_tab_view_append_pinned"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2639">Inserts @child as the last pinned page.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2646">the page object representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2641">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2642">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_other_pages"
              c:identifier="hdy_tab_view_close_other_pages"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2740">Requests to close all pages other than @page.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2742">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2743">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_page"
              c:identifier="hdy_tab_view_close_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2660">Requests to close @page.

Calling this function will result in #HdyTabView::close-page signal being
emitted for @page. Closing the page can then be confirmed or denied via
hdy_tab_view_close_page_finish().

If the page is waiting for a hdy_tab_view_close_page_finish() call, this
function will do nothing.

The default handler for #HdyTabView::close-page will immediately confirm
closing the page if it's non-pinned, or reject it if it's pinned. This
behavior can be changed by registering your own handler for that signal.

If @page was selected, another page will be selected instead:

If the #HdyTabPage:parent value is %NULL, the next page will be selected when
possible, or if the page was already last, the previous page will be selected
instead.

If it's not %NULL, the previous page will be selected if it's a
descendant (possibly indirect) of the parent. If both the previous page and
the parent are pinned, the parent will be selected instead.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2662">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2663">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_page_finish"
              c:identifier="hdy_tab_view_close_page_finish"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2707">Completes a hdy_tab_view_close_page() call for @page.

If @confirm is %TRUE, @page will be closed. If it's %FALSE, ite will be
reverted to its previous state and hdy_tab_view_close_page() can be called
for it again.

This function should not be called unless a custom handler for
#HdyTabView::close-page is used.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2709">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2710">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
          <parameter name="confirm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2711">whether to confirm or deny closing @page</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_pages_after"
              c:identifier="hdy_tab_view_close_pages_after"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2797">Requests to close all pages after @page.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2799">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2800">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_pages_before"
              c:identifier="hdy_tab_view_close_pages_before"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2769">Requests to close all pages before @page.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2771">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2772">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_icon"
              c:identifier="hdy_tab_view_get_default_icon"
              glib:get-property="default-icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2128">Gets default icon of @self, see hdy_tab_view_set_default_icon().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2134">the default icon of @self.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2130">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_transferring_page"
              c:identifier="hdy_tab_view_get_is_transferring_page"
              glib:get-property="is-transferring-page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1923">Whether a page is being transferred.

Gets the value of #HdyTabView:is-transferring-page property.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1931">whether a page is being transferred</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1925">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_model"
              c:identifier="hdy_tab_view_get_menu_model"
              glib:get-property="menu-model"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2179">Gets the tab context menu model for @self, see hdy_tab_view_set_menu_model().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="114"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2185">the tab context menu model for @self</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2181">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pages"
              c:identifier="hdy_tab_view_get_n_pages"
              glib:get-property="n-pages"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1885">Gets the number of pages in @self.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1891">the number of pages in @self</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1887">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pinned_pages"
              c:identifier="hdy_tab_view_get_n_pinned_pages"
              glib:get-property="n-pinned-pages"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1903">Gets the number of pinned pages in @self.

See hdy_tab_view_set_page_pinned().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1911">the number of pinned pages in @self</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1905">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_page"
              c:identifier="hdy_tab_view_get_nth_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2409">Gets the #HdyTabPage representing the child at @position.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2416">the page object at @position</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2411">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2412">the index of the page in @self, starting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page"
              c:identifier="hdy_tab_view_get_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2378">Gets the #HdyTabPage object representing @child.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2385">the #HdyTabPage representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2380">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2381">a child in @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_position"
              c:identifier="hdy_tab_view_get_page_position"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2435">Finds the position of @page in @self, starting from 0.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2442">the position of @page in @self</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2437">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2438">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pages"
              c:identifier="hdy_tab_view_get_pages"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="3076">Returns a #GListModel containing the pages of @self. This model can be used
to keep an up to date view of the pages.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="211"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="3083">the model containing pages of @self</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="3078">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_page"
              c:identifier="hdy_tab_view_get_selected_page"
              glib:get-property="selected-page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1943">Gets the currently selected page in @self.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="97"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1949">the selected page in @self</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1945">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shortcut_widget"
              c:identifier="hdy_tab_view_get_shortcut_widget"
              glib:get-property="shortcut-widget"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2225">Gets the shortcut widget for @self, see hdy_tab_view_set_shortcut_widget().</doc>
        <source-position filename="../src/hdy-tab-view.h" line="120"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2231">the shortcut widget for @self</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2227">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="hdy_tab_view_insert" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2520">Inserts a non-pinned page at @position.

It's an error to try to insert a page before a pinned page, in that case
hdy_tab_view_insert_pinned() should be used instead.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2531">the page object representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2522">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2523">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2524">the position to add @child at, starting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_pinned"
              c:identifier="hdy_tab_view_insert_pinned"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2590">Inserts a pinned page at @position.

It's an error to try to insert a pinned page after a non-pinned page, in
that case hdy_tab_view_insert() should be used instead.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2601">the page object representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2592">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2593">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2594">the position to add @child at, starting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="hdy_tab_view_prepend" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2548">Inserts @child as the first non-pinned page.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2555">the page object representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2550">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2551">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_pinned"
              c:identifier="hdy_tab_view_prepend_pinned"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2618">Inserts @child as the first pinned page.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2625">the page object representing @child</doc>
          <type name="TabPage" c:type="HdyTabPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2620">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2621">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_backward"
              c:identifier="hdy_tab_view_reorder_backward"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2881">Reorders @page to before its previous page if possible.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2888">%TRUE if @page was moved, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2883">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2884">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_first"
              c:identifier="hdy_tab_view_reorder_first"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2947">Reorders @page to the first possible position.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2954">%TRUE if @page was moved, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2949">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2950">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_forward"
              c:identifier="hdy_tab_view_reorder_forward"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2914">Reorders @page to after its next page if possible.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2921">%TRUE if @page was moved, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2916">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2917">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_last"
              c:identifier="hdy_tab_view_reorder_last"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2975">Reorders @page to the last possible position.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2982">%TRUE if @page was moved, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2977">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2978">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_page"
              c:identifier="hdy_tab_view_reorder_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2825">Reorders @page to @position.

It's a programmer error to try to reorder a pinned page after a non-pinned
one, or a non-pinned page before a pinned one.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2836">%TRUE if @page was moved, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2827">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2828">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2829">the position to insert the page at, starting at 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_next_page"
              c:identifier="hdy_tab_view_select_next_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2035">Selects the page after the currently selected page.

If the last page was already selected, this function does nothing.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2043">%TRUE if the selected page was changed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2037">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_previous_page"
              c:identifier="hdy_tab_view_select_previous_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2000">Selects the page before the currently selected page.

If the first page was already selected, this function does nothing.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="2008">%TRUE if the selected page was changed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2002">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_icon"
              c:identifier="hdy_tab_view_set_default_icon"
              glib:set-property="default-icon"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2146">Sets default page icon for @self.

If a page doesn't provide its own icon via #HdyTabPage:icon, default icon
may be used instead for contexts where having an icon is necessary.

#HdyTabBar will use default icon for pinned tabs in case the page is not
loading, doesn't have an icon and an indicator. Default icon is never used
for tabs that aren't pinned.

By default, 'hdy-tab-icon-missing-symbolic' icon is used.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2148">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="default_icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2149">the default icon</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_model"
              c:identifier="hdy_tab_view_set_menu_model"
              glib:set-property="menu-model"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2197">Sets the tab context menu model for @self.

When a context menu is shown for a tab, it will be constructed from the
provided menu model. Use #HdyTabView::setup-menu signal to set up the menu
actions for the particular tab.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2199">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="menu_model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2200">a menu model</doc>
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page_pinned"
              c:identifier="hdy_tab_view_set_page_pinned"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2302">Pins or unpins @page.

Pinned pages are guaranteed to be placed before all non-pinned pages; at any
given moment the first #HdyTabView:n-pinned-pages pages in @self are
guaranteed to be pinned.

When a page is pinned or unpinned, it's automatically reordered: pinning a
page moves it after other pinned pages; unpinning a page moves it before
other non-pinned pages.

Pinned pages can still be reordered between each other.

#HdyTabBar will display pinned pages in a compact form, never showing the
title or close button, and only showing a single icon, selected in the
following order:

1. #HdyTabPage:indicator-icon
2. A spinner if #HdyTabPage:loading is %TRUE
3. #HdyTabPage:icon
4. #HdyTabView:default-icon

Pinned pages cannot be closed by default, see #HdyTabView::close-page for how
to override that behavior.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2304">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2305">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
          <parameter name="pinned" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2306">whether @page should be pinned</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_page"
              c:identifier="hdy_tab_view_set_selected_page"
              glib:set-property="selected-page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1961">Sets the currently selected page in @self.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1963">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="selected_page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1964">a page in @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shortcut_widget"
              c:identifier="hdy_tab_view_set_shortcut_widget"
              glib:set-property="shortcut-widget"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="2243">Sets the shortcut widget for @self.

Registers the following shortcuts on @widget:
* Ctrl+Page Up - switch to the previous page
* Ctrl+Page Down - switch to the next page
* Ctrl+Home - switch to the first page
* Ctrl+End - switch to the last page
* Ctrl+Shift+Page Up - move the current page backward
* Ctrl+Shift+Page Down - move the current page forward
* Ctrl+Shift+Home - move the current page at the start
* Ctrl+Shift+End - move the current page at the end
* Ctrl+Tab - switch to the next page, with looping
* Ctrl+Shift+Tab - switch to the previous page, with looping
* Alt+1-9 - switch to pages 1-9
* Alt+0 - switch to page 10

These shortcuts are always available on @self, this function is useful if
they should be available globally.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2245">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="2246">a shortcut widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transfer_page"
              c:identifier="hdy_tab_view_transfer_page"
              version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="3038">Transfers @page from @self to @other_view. The @page object will be reused.

It's a programmer error to try to insert a pinned page after a non-pinned
one, or a non-pinned page before a pinned one.</doc>
        <source-position filename="../src/hdy-tab-view.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="3040">a #HdyTabView</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="3041">a page of @self</doc>
            <type name="TabPage" c:type="HdyTabPage*"/>
          </parameter>
          <parameter name="other_view" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="3042">the tab view to transfer the page to</doc>
            <type name="TabView" c:type="HdyTabView*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="3043">the position to insert the page at, starting at 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-icon"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_default_icon"
                getter="get_default_icon">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1162">Default page icon.

If a page doesn't provide its own icon via #HdyTabPage:icon, default icon
may be used instead for contexts where having an icon is necessary.

#HdyTabBar will use default icon for pinned tabs in case the page is not
loading, doesn't have an icon and an indicator. Default icon is never used
for tabs that aren't pinned.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="is-transferring-page"
                version="1.2"
                transfer-ownership="none"
                getter="get_is_transferring_page">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1128">Whether a page is being transferred.

This property will be set to %TRUE when a drag-n-drop tab transfer starts
on any #HdyTabView, and to %FALSE after it ends.

During the transfer, children cannot receive pointer input and a tab can
be safely dropped on the tab view.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="menu-model"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_menu_model"
                getter="get_menu_model">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1183">Tab context menu model.

When a context menu is shown for a tab, it will be constructed from the
provided menu model. Use #HdyTabView::setup-menu signal to set up the menu
actions for the particular tab.</doc>
        <type name="Gio.MenuModel"/>
      </property>
      <property name="n-pages"
                version="1.2"
                transfer-ownership="none"
                getter="get_n_pages">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1098">The number of pages in the tab view.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="n-pinned-pages"
                version="1.2"
                transfer-ownership="none"
                getter="get_n_pinned_pages">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1112">The number of pinned pages in the tab view.

See hdy_tab_view_set_page_pinned().</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="selected-page"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_selected_page"
                getter="get_selected_page">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1148">The currently selected page.</doc>
        <type name="TabPage"/>
      </property>
      <property name="shortcut-widget"
                version="1.2"
                writable="1"
                transfer-ownership="none"
                setter="set_shortcut_widget"
                getter="get_shortcut_widget">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1201">Tab shortcut widget, has the following shortcuts:
* Ctrl+Page Up - switch to the previous page
* Ctrl+Page Down - switch to the next page
* Ctrl+Home - switch to the first page
* Ctrl+End - switch to the last page
* Ctrl+Shift+Page Up - move the current page backward
* Ctrl+Shift+Page Down - move the current page forward
* Ctrl+Shift+Home - move the current page at the start
* Ctrl+Shift+End - move the current page at the end
* Ctrl+Tab - switch to the next page, with looping
* Ctrl+Shift+Tab - switch to the previous page, with looping
* Alt+1-9 - switch to pages 1-9
* Alt+0 - switch to page 10

These shortcuts are always available on @self, this property is useful if
they should be available globally.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <glib:signal name="close-page" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1305">This signal is emitted after hdy_tab_view_close_page() has been called for
@page.

The handler is expected to call hdy_tab_view_close_page_finish() to confirm
or reject the closing.

The default handler will immediately confirm closing for non-pinned pages,
or reject it for pinned pages, equivalent to the following example:

|[&lt;!-- language="C" --&gt;
static gboolean
close_page_cb (HdyTabView *view,
               HdyTabPage *page,
               gpointer    user_data)
{
  hdy_tab_view_close_page_finish (view, page, !hdy_tab_page_get_pinned (page));

  return GDK_EVENT_STOP;
}
]|

The hdy_tab_view_close_page_finish() doesn't have to happen during the
handler, so can be used to do asynchronous checks before confirming the
closing.

A typical reason to connect to this signal is to show a confirmation dialog
for closing a tab.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1308">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="create-window" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1374">This signal is emitted when a tab is dropped onto desktop and should be
transferred into a new window.

The signal handler is expected to create a new window, position it as
needed and return its #HdyTabView that the page will be transferred into.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-tab-view.c"
               line="1384">the #HdyTabView from the new window</doc>
          <type name="TabView"/>
        </return-value>
      </glib:signal>
      <glib:signal name="indicator-activated" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1398">This signal is emitted after the indicator icon on @page has been activated.

See #HdyTabPage:indicator-icon and #HdyTabPage:indicator-activatable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1401">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-attached" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1232">This signal is emitted when a page has been created or transferred to
@self.

A typical reason to connect to this signal would be to connect to page
signals for things such as updating window title.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1235">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1236">the position of the page, starting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-detached" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1256">This signal is emitted when a page has been removed or transferred to
another view.

A typical reason to connect to this signal would be to disconnect signal
handlers connected in the #HdyTabView::page-attached handler.

It is important not to try and destroy the page child in the handler of
this function as the child might merely be moved to another window; use
child dispose handler for that or do it in sync with your
hdy_tab_view_close_page_finish() calls.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1259">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1260">the position of the removed page, starting from 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="page-reordered" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1285">This signal is emitted after @page has been reordered to @position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1288">a page of @self</doc>
            <type name="TabPage"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1289">the position @page was moved to, starting at 0</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="setup-menu" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="../src/hdy-tab-view.c"
             line="1351">This signal is emitted before a context menu is opened for @page, and after
it's closed, in the latter case the @page will be set to %NULL.

It can be used to set up menu actions before showing the menu, for example
disable actions not applicable to @page.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-tab-view.c"
                 line="1354">a page of @self, or %NULL</doc>
            <type name="TabPage"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TabViewClass"
            c:type="HdyTabViewClass"
            glib:is-gtype-struct-for="TabView">
      <source-position filename="../src/hdy-tab-view.h" line="83"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="TitleBar"
           c:symbol-prefix="title_bar"
           c:type="HdyTitleBar"
           parent="Gtk.Bin"
           glib:type-name="HdyTitleBar"
           glib:get-type="hdy_title_bar_get_type"
           glib:type-struct="TitleBarClass">
      <source-position filename="../src/hdy-title-bar.h" line="22"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_title_bar_new"
                   deprecated="1"
                   deprecated-version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-title-bar.c"
             line="349">Creates a new #HdyTitleBar.</doc>
        <source-position filename="../src/hdy-title-bar.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-title-bar.c"
               line="354">a new #HdyTitleBar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_selection_mode"
              c:identifier="hdy_title_bar_get_selection_mode"
              glib:get-property="selection-mode"
              deprecated="1"
              deprecated-version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-title-bar.c"
             line="88">Returns whether whether @self is in selection mode.</doc>
        <source-position filename="../src/hdy-title-bar.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-title-bar.c"
               line="94">%TRUE if the title bar is in selection mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-title-bar.c"
                 line="90">a #HdyTitleBar</doc>
            <type name="TitleBar" c:type="HdyTitleBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_selection_mode"
              c:identifier="hdy_title_bar_set_selection_mode"
              glib:set-property="selection-mode"
              deprecated="1"
              deprecated-version="1.4">
        <doc xml:space="preserve"
             filename="../src/hdy-title-bar.c"
             line="54">Sets whether @self is in selection mode.</doc>
        <source-position filename="../src/hdy-title-bar.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-title-bar.c"
                 line="56">a #HdyTitleBar</doc>
            <type name="TitleBar" c:type="HdyTitleBar*"/>
          </instance-parameter>
          <parameter name="selection_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-title-bar.c"
                 line="57">%TRUE to enable the selection mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="selection-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_selection_mode"
                getter="get_selection_mode">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TitleBarClass"
            c:type="HdyTitleBarClass"
            glib:is-gtype-struct-for="TitleBar">
      <source-position filename="../src/hdy-title-bar.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="ValueObject"
           c:symbol-prefix="value_object"
           c:type="HdyValueObject"
           parent="GObject.Object"
           glib:type-name="HdyValueObject"
           glib:get-type="hdy_value_object_get_type"
           glib:type-struct="ValueObjectClass">
      <source-position filename="../src/hdy-value-object.h" line="23"/>
      <constructor name="new"
                   c:identifier="hdy_value_object_new"
                   version="0.0.8">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="40">Create a new #HdyValueObject.</doc>
        <source-position filename="../src/hdy-value-object.h" line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-value-object.c"
               line="46">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="42">the #GValue to store</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_collect"
                   c:identifier="hdy_value_object_new_collect"
                   version="0.0.8"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="57">Creates a new #HdyValueObject. This is a convenience method which uses
the G_VALUE_COLLECT() macro internally.</doc>
        <source-position filename="../src/hdy-value-object.h" line="28"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-value-object.c"
               line="65">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="59">the #GType of the value</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="60">the value to store</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_string"
                   c:identifier="hdy_value_object_new_string"
                   version="0.0.8"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="89">Creates a new #HdyValueObject. This is a convenience method to create a
#HdyValueObject that stores a string.</doc>
        <source-position filename="../src/hdy-value-object.h" line="31"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-value-object.c"
               line="96">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="91">the string to store</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_take_string"
                   c:identifier="hdy_value_object_new_take_string"
                   version="0.0.8"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="109">Creates a new #HdyValueObject. This is a convenience method to create a
#HdyValueObject that stores a string taking ownership of it.</doc>
        <source-position filename="../src/hdy-value-object.h" line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-value-object.c"
               line="116">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="111">the string to store</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy_value"
              c:identifier="hdy_value_object_copy_value"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="221">Copy data from the contained #GValue into @dest.</doc>
        <source-position filename="../src/hdy-value-object.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="223">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="224">#GValue with correct type to copy into</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_string"
              c:identifier="hdy_value_object_dup_string"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="252">Returns a copy of the contained string if the value is of type
#G_TYPE_STRING.</doc>
        <source-position filename="../src/hdy-value-object.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-value-object.c"
               line="259">a copy of the contained string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="254">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string"
              c:identifier="hdy_value_object_get_string"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="237">Returns the contained string if the value is of type #G_TYPE_STRING.</doc>
        <source-position filename="../src/hdy-value-object.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-value-object.c"
               line="243">the contained string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="239">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="hdy_value_object_get_value"
              glib:get-property="value"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="../src/hdy-value-object.c"
             line="206">Return the contained value.</doc>
        <source-position filename="../src/hdy-value-object.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-value-object.c"
               line="212">the contained #GValue</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-value-object.c"
                 line="208">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="value"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_value">
        <type name="GObject.Value"/>
      </property>
    </class>
    <record name="ValueObjectClass"
            c:type="HdyValueObjectClass"
            glib:is-gtype-struct-for="ValueObject">
      <source-position filename="../src/hdy-value-object.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ViewSwitcher"
           c:symbol-prefix="view_switcher"
           c:type="HdyViewSwitcher"
           parent="Gtk.Bin"
           glib:type-name="HdyViewSwitcher"
           glib:get-type="hdy_view_switcher_get_type"
           glib:type-struct="ViewSwitcherClass">
      <source-position filename="../src/hdy-view-switcher.h" line="23"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_view_switcher_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="573">Creates a new #HdyViewSwitcher widget.</doc>
        <source-position filename="../src/hdy-view-switcher.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher.c"
               line="578">a new #HdyViewSwitcher</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_narrow_ellipsize"
              c:identifier="hdy_view_switcher_get_narrow_ellipsize"
              glib:get-property="narrow-ellipsize"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="631">Get the ellipsizing position of the narrow mode label. See
hdy_view_switcher_set_narrow_ellipsize().</doc>
        <source-position filename="../src/hdy-view-switcher.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher.c"
               line="638">#PangoEllipsizeMode</doc>
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="633">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_policy"
              c:identifier="hdy_view_switcher_get_policy"
              glib:get-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="588">Gets the policy of @self.</doc>
        <source-position filename="../src/hdy-view-switcher.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher.c"
               line="594">the policy of @self</doc>
          <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="590">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="hdy_view_switcher_get_stack"
              glib:get-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="682">Get the #GtkStack being controlled by the #HdyViewSwitcher.

See: hdy_view_switcher_set_stack()</doc>
        <source-position filename="../src/hdy-view-switcher.h" line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher.c"
               line="690">the #GtkStack, or %NULL if none has been set</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="684">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_narrow_ellipsize"
              c:identifier="hdy_view_switcher_set_narrow_ellipsize"
              glib:set-property="narrow-ellipsize"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="650">Set the mode used to ellipsize the text in narrow mode if there is not
enough space to render the entire string.</doc>
        <source-position filename="../src/hdy-view-switcher.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="652">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="653">a #PangoEllipsizeMode</doc>
            <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="hdy_view_switcher_set_policy"
              glib:set-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="606">Sets the policy of @self.</doc>
        <source-position filename="../src/hdy-view-switcher.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="608">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="609">the new policy</doc>
            <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="hdy_view_switcher_set_stack"
              glib:set-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="702">Sets the #GtkStack to control.</doc>
        <source-position filename="../src/hdy-view-switcher.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="704">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher.c"
                 line="705">a #GtkStack</doc>
            <type name="Gtk.Stack" c:type="GtkStack*"/>
          </parameter>
        </parameters>
      </method>
      <property name="narrow-ellipsize"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_narrow_ellipsize"
                getter="get_narrow_ellipsize">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="517">The preferred place to ellipsize the string, if the narrow mode label does
not have enough room to display the entire string, specified as a
#PangoEllipsizeMode.

Note that setting this property to a value other than %PANGO_ELLIPSIZE_NONE
has the side-effect that the label requests only enough space to display
the ellipsis.</doc>
        <type name="Pango.EllipsizeMode"/>
      </property>
      <property name="policy"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_policy"
                getter="get_policy">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="502">The #HdyViewSwitcherPolicy the view switcher should use to determine which
mode to use.</doc>
        <type name="ViewSwitcherPolicy"/>
      </property>
      <property name="stack"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="538">The #GtkStack the view switcher controls.</doc>
        <type name="Gtk.Stack"/>
      </property>
    </class>
    <class name="ViewSwitcherBar"
           c:symbol-prefix="view_switcher_bar"
           c:type="HdyViewSwitcherBar"
           parent="Gtk.Bin"
           glib:type-name="HdyViewSwitcherBar"
           glib:get-type="hdy_view_switcher_bar_get_type"
           glib:type-struct="ViewSwitcherBarClass">
      <source-position filename="../src/hdy-view-switcher-bar.h" line="25"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_view_switcher_bar_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="236">Creates a new #HdyViewSwitcherBar widget.</doc>
        <source-position filename="../src/hdy-view-switcher-bar.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-bar.c"
               line="241">a new #HdyViewSwitcherBar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_policy"
              c:identifier="hdy_view_switcher_bar_get_policy"
              glib:get-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="251">Gets the policy of @self.</doc>
        <source-position filename="../src/hdy-view-switcher-bar.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-bar.c"
               line="257">the policy of @self</doc>
          <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="253">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal"
              c:identifier="hdy_view_switcher_bar_get_reveal"
              glib:get-property="reveal"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="350">Gets whether @self should be revealed or not.</doc>
        <source-position filename="../src/hdy-view-switcher-bar.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-bar.c"
               line="356">%TRUE if @self is revealed, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="352">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="hdy_view_switcher_bar_get_stack"
              glib:get-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="294">Get the #GtkStack being controlled by the #HdyViewSwitcher.</doc>
        <source-position filename="../src/hdy-view-switcher-bar.h" line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-bar.c"
               line="300">the #GtkStack, or %NULL if none has been set</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="296">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="hdy_view_switcher_bar_set_policy"
              glib:set-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="269">Sets the policy of @self.</doc>
        <source-position filename="../src/hdy-view-switcher-bar.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="271">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="272">the new policy</doc>
            <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal"
              c:identifier="hdy_view_switcher_bar_set_reveal"
              glib:set-property="reveal"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="368">Sets whether @self should be revealed or not.</doc>
        <source-position filename="../src/hdy-view-switcher-bar.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="370">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="reveal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="371">%TRUE to reveal @self</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="hdy_view_switcher_bar_set_stack"
              glib:set-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="312">Sets the #GtkStack to control.</doc>
        <source-position filename="../src/hdy-view-switcher-bar.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="314">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-bar.c"
                 line="315">a #GtkStack</doc>
            <type name="Gtk.Stack" c:type="GtkStack*"/>
          </parameter>
        </parameters>
      </method>
      <property name="policy"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_policy"
                getter="get_policy">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="168">The #HdyViewSwitcherPolicy the #HdyViewSwitcher should use to determine
which mode to use.</doc>
        <type name="ViewSwitcherPolicy"/>
      </property>
      <property name="reveal"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal"
                getter="get_reveal">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="197">Whether the bar should be revealed or hidden.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="stack"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-bar.c"
             line="183">The #GtkStack the #HdyViewSwitcher controls.</doc>
        <type name="Gtk.Stack"/>
      </property>
    </class>
    <record name="ViewSwitcherBarClass"
            c:type="HdyViewSwitcherBarClass"
            glib:is-gtype-struct-for="ViewSwitcherBar">
      <source-position filename="../src/hdy-view-switcher-bar.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <record name="ViewSwitcherClass"
            c:type="HdyViewSwitcherClass"
            glib:is-gtype-struct-for="ViewSwitcher">
      <source-position filename="../src/hdy-view-switcher.h" line="23"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <enumeration name="ViewSwitcherPolicy"
                 glib:type-name="HdyViewSwitcherPolicy"
                 glib:get-type="hdy_view_switcher_policy_get_type"
                 c:type="HdyViewSwitcherPolicy">
      <member name="auto"
              value="0"
              c:identifier="HDY_VIEW_SWITCHER_POLICY_AUTO"
              glib:nick="auto"
              glib:name="HDY_VIEW_SWITCHER_POLICY_AUTO">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="45">Automatically adapt to the best fitting mode</doc>
      </member>
      <member name="narrow"
              value="1"
              c:identifier="HDY_VIEW_SWITCHER_POLICY_NARROW"
              glib:nick="narrow"
              glib:name="HDY_VIEW_SWITCHER_POLICY_NARROW">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="46">Force the narrow mode</doc>
      </member>
      <member name="wide"
              value="2"
              c:identifier="HDY_VIEW_SWITCHER_POLICY_WIDE"
              glib:nick="wide"
              glib:name="HDY_VIEW_SWITCHER_POLICY_WIDE">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher.c"
             line="47">Force the wide mode</doc>
      </member>
    </enumeration>
    <class name="ViewSwitcherTitle"
           c:symbol-prefix="view_switcher_title"
           c:type="HdyViewSwitcherTitle"
           parent="Gtk.Bin"
           glib:type-name="HdyViewSwitcherTitle"
           glib:get-type="hdy_view_switcher_title_get_type"
           glib:type-struct="ViewSwitcherTitleClass">
      <source-position filename="../src/hdy-view-switcher-title.h" line="25"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_view_switcher_title_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="333">Creates a new #HdyViewSwitcherTitle widget.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-title.c"
               line="338">a new #HdyViewSwitcherTitle</doc>
          <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
        </return-value>
      </constructor>
      <method name="get_policy"
              c:identifier="hdy_view_switcher_title_get_policy"
              glib:get-property="policy"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="348">Gets the policy of @self.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-title.c"
               line="354">the policy of @self</doc>
          <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="350">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="hdy_view_switcher_title_get_stack"
              glib:get-property="stack"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="391">Get the #GtkStack being controlled by the #HdyViewSwitcher.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-title.c"
               line="397">the #GtkStack, or %NULL if none has been set</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="393">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="hdy_view_switcher_title_get_subtitle"
              glib:get-property="subtitle"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="490">Gets the subtitle of @self. See hdy_view_switcher_title_set_subtitle().</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-title.c"
               line="496">the subtitle of @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="492">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_view_switcher_title_get_title"
              glib:get-property="title"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="447">Gets the title of @self. See hdy_view_switcher_title_set_title().</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-title.c"
               line="453">the title of @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="449">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title_visible"
              c:identifier="hdy_view_switcher_title_get_title_visible"
              glib:get-property="title-visible"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="584">Get whether the title label of @self is visible.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-title.c"
               line="590">%TRUE if the title label of @self is visible, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="586">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view_switcher_enabled"
              c:identifier="hdy_view_switcher_title_get_view_switcher_enabled"
              glib:get-property="view-switcher-enabled"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="533">Gets whether @self's view switcher is enabled.

See hdy_view_switcher_title_set_view_switcher_enabled().</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-view-switcher-title.c"
               line="541">%TRUE if the view switcher is enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="535">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="hdy_view_switcher_title_set_policy"
              glib:set-property="policy"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="366">Sets the policy of @self.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="368">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="369">the new policy</doc>
            <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="hdy_view_switcher_title_set_stack"
              glib:set-property="stack"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="409">Sets the #GtkStack to control.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="411">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="412">a #GtkStack</doc>
            <type name="Gtk.Stack" c:type="GtkStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="hdy_view_switcher_title_set_subtitle"
              glib:set-property="subtitle"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="508">Sets the subtitle of @self. The subtitle should give a user additional
details.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="510">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="511">a subtitle, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_view_switcher_title_set_title"
              glib:set-property="title"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="465">Sets the title of @self. The title should give a user additional details. A
good title should not include the application name.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="467">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="468">a title, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view_switcher_enabled"
              c:identifier="hdy_view_switcher_title_set_view_switcher_enabled"
              glib:set-property="view-switcher-enabled"
              version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="553">Make @self enable or disable its view switcher. If it is disabled, the title
will be displayed instead. This allows to programmatically and prematurely
hide the view switcher of @self even if it fits in the available space.

This can be used e.g. to ensure the view switcher is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <source-position filename="../src/hdy-view-switcher-title.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="555">a #HdyViewSwitcherTitle</doc>
            <type name="ViewSwitcherTitle" c:type="HdyViewSwitcherTitle*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/hdy-view-switcher-title.c"
                 line="556">%TRUE to enable the view switcher, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="policy"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_policy"
                getter="get_policy">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="220">The #HdyViewSwitcherPolicy the #HdyViewSwitcher should use to determine
which mode to use.</doc>
        <type name="ViewSwitcherPolicy"/>
      </property>
      <property name="stack"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="235">The #GtkStack the #HdyViewSwitcher controls.</doc>
        <type name="Gtk.Stack"/>
      </property>
      <property name="subtitle"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="263">The subtitle of the #HdyViewSwitcher.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="249">The title of the #HdyViewSwitcher.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title-visible"
                version="1.0"
                transfer-ownership="none"
                getter="get_title_visible">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="291">Whether the bar should be revealed or hidden.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="view-switcher-enabled"
                version="1.0"
                writable="1"
                transfer-ownership="none"
                setter="set_view_switcher_enabled"
                getter="get_view_switcher_enabled">
        <doc xml:space="preserve"
             filename="../src/hdy-view-switcher-title.c"
             line="277">Whether the bar should be revealed or hidden.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ViewSwitcherTitleClass"
            c:type="HdyViewSwitcherTitleClass"
            glib:is-gtype-struct-for="ViewSwitcherTitle">
      <source-position filename="../src/hdy-view-switcher-title.h" line="25"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="HdyWindow"
           parent="Gtk.Window"
           glib:type-name="HdyWindow"
           glib:get-type="hdy_window_get_type"
           glib:type-struct="WindowClass">
      <source-position filename="../src/hdy-window.h" line="30"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_window_new" version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-window.c"
             line="180">Creates a new #HdyWindow.</doc>
        <source-position filename="../src/hdy-window.h" line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-window.c"
               line="185">a newly created #HdyWindow</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="WindowClass"
            c:type="HdyWindowClass"
            glib:is-gtype-struct-for="Window">
      <source-position filename="../src/hdy-window.h" line="30"/>
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="WindowHandle"
           c:symbol-prefix="window_handle"
           c:type="HdyWindowHandle"
           parent="Gtk.EventBox"
           glib:type-name="HdyWindowHandle"
           glib:get-type="hdy_window_handle_get_type"
           glib:type-struct="WindowHandleClass">
      <source-position filename="../src/hdy-window-handle.h" line="22"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_window_handle_new"
                   version="1.0">
        <doc xml:space="preserve"
             filename="../src/hdy-window-handle.c"
             line="70">Creates a new #HdyWindowHandle.</doc>
        <source-position filename="../src/hdy-window-handle.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/hdy-window-handle.c"
               line="75">a newly created #HdyWindowHandle</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="WindowHandleClass"
            c:type="HdyWindowHandleClass"
            glib:is-gtype-struct-for="WindowHandle">
      <source-position filename="../src/hdy-window-handle.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <function name="ease_out_cubic"
              c:identifier="hdy_ease_out_cubic"
              version="0.0.11">
      <doc xml:space="preserve"
           filename="../src/hdy-animation.c"
           line="255">Computes the ease out for @t.</doc>
      <source-position filename="../src/hdy-animation.h" line="23"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/hdy-animation.c"
             line="261">the ease out for @t.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="t" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-animation.c"
               line="257">the term</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_value_row_name"
              c:identifier="hdy_enum_value_row_name"
              version="0.0.6">
      <doc xml:space="preserve"
           filename="../src/hdy-combo-row.c"
           line="814">This is a default implementation of #HdyComboRowGetEnumValueNameFunc to be
used with hdy_combo_row_set_for_enum(). If the enumeration has a nickname, it
will return it, otherwise it will return its name.</doc>
      <source-position filename="../src/hdy-combo-row.h" line="109"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/hdy-combo-row.c"
             line="823">a newly allocated displayable name that represents @value</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.c"
               line="816">the value from the enum from which to get a name</doc>
          <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../src/hdy-combo-row.c"
               line="817">unused user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_enable_animations"
              c:identifier="hdy_get_enable_animations"
              version="0.0.11">
      <doc xml:space="preserve"
           filename="../src/hdy-animation.c"
           line="208">Returns whether animations are enabled for that widget. This should be used
when implementing an animated widget to know whether to animate it or not.</doc>
      <source-position filename="../src/hdy-animation.h" line="20"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/hdy-animation.c"
             line="215">%TRUE if animations are enabled for @widget.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/hdy-animation.c"
               line="210">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="hdy-action-row">
      <doc xml:space="preserve"
           filename="../src/hdy-action-row.c"
           line="12">The #HdyActionRow widget can have a title, a subtitle and an icon. The row
can receive additional widgets at its end, or prefix widgets at its start.

It is convenient to present a preference and its related actions.

#HdyActionRow is unactivatable by default, giving it an activatable widget
will automatically make it activatable, but unsetting it won't change the
row's activatability.

# HdyActionRow as GtkBuildable

The GtkWindow implementation of the GtkBuildable interface supports setting a
child at its end by omitting the “type” attribute of a &amp;lt;child&amp;gt; element.

It also supports setting a child as a prefix widget by specifying “prefix” as
the “type” attribute of a &amp;lt;child&amp;gt; element.

# CSS nodes

#HdyActionRow has a main CSS node with name row.

It contains the subnode box.header for its main horizontal box, and box.title
for the vertical box containing the title and subtitle labels.

It contains subnodes label.title and label.subtitle representing respectively
the title label and subtitle label.</doc>
    </docsection>
    <docsection name="hdy-animation">
      <doc xml:space="preserve"
           filename="../src/hdy-animation.c"
           line="11">Animation helpers.</doc>
    </docsection>
    <docsection name="hdy-application-window">
      <doc xml:space="preserve"
           filename="../src/hdy-application-window.c"
           line="12">HdyApplicationWindow is a #GtkApplicationWindow subclass providing the same
features as #HdyWindow.

See #HdyWindow for details.

Using gtk_application_set_app_menu() and gtk_application_set_menubar() is
not supported and may result in visual glitches.</doc>
    </docsection>
    <docsection name="hdy-avatar">
      <doc xml:space="preserve"
           filename="../src/hdy-avatar.c"
           line="23">#HdyAvatar is a widget to display a round avatar.
A provided image is made round before displaying, if no image is given this
widget generates a round fallback with the initials of the #HdyAvatar:text
on top of a colord background.
The color is picked based on the hash of the #HdyAvatar:text.
If #HdyAvatar:show-initials is set to %FALSE, `avatar-default-symbolic` is
shown in place of the initials.
Use hdy_avatar_set_loadable_icon() or #HdyAvatar:loadable-icon to set a
custom image.

# CSS nodes

#HdyAvatar has a single CSS node with name avatar.</doc>
    </docsection>
    <docsection name="hdy-carousel">
      <doc xml:space="preserve"
           filename="../src/hdy-carousel.c"
           line="22">The #HdyCarousel widget can be used to display a set of pages with
swipe-based navigation between them.

# CSS nodes

#HdyCarousel has a single CSS node with name carousel.</doc>
    </docsection>
    <docsection name="hdy-carousel-indicator-dots">
      <doc xml:space="preserve"
           filename="../src/hdy-carousel-indicator-dots.c"
           line="24">The #HdyCarouselIndicatorDots widget can be used to show a set of dots for each
page of a given #HdyCarousel. The dot representing the carousel's active page
is larger and more opaque than the others, the transition to the active and
inactive state is gradual to match the carousel's position.

# CSS nodes

#HdyCarouselIndicatorDots has a single CSS node with name carouselindicatordots.</doc>
    </docsection>
    <docsection name="hdy-carousel-indicator-lines">
      <doc xml:space="preserve"
           filename="../src/hdy-carousel-indicator-lines.c"
           line="24">The #HdyCarouselIndicatorLines widget can be used to show a set of thin and long
rectangles for each page of a given #HdyCarousel. The carousel's active page
is shown with another rectangle that moves between them to match the
carousel's position.

# CSS nodes

#HdyCarouselIndicatorLines has a single CSS node with name carouselindicatorlines.</doc>
    </docsection>
    <docsection name="hdy-clamp">
      <doc xml:space="preserve"
           filename="../src/hdy-clamp.c"
           line="16">The #HdyClamp widget constraints the size of the widget it contains to a
given maximum size. It will constrain the width if it is horizontal, or the
height if it is vertical. The expansion of the child from its minimum to its
maximum size is eased out for a smooth transition.

If the child requires more than the requested maximum size, it will be
allocated the minimum size it can fit in instead.

# CSS nodes

#HdyClamp has a single CSS node with name clamp. The node will get the style
classes .large when its child reached its maximum size, .small when the clamp
allocates its full size to its child, .medium in-between, or none if it
didn't compute its size yet.</doc>
    </docsection>
    <docsection name="hdy-combo-row">
      <doc xml:space="preserve"
           filename="../src/hdy-combo-row.c"
           line="12">The #HdyComboRow widget allows the user to choose from a list of valid
choices. The row displays the selected choice. When activated, the row
displays a popover which allows the user to make a new choice.

The #HdyComboRow uses the model-view pattern; the list of valid choices
is specified in the form of a #GListModel, and the display of the choices can
be adapted to the data in the model via widget creation functions.

#HdyComboRow is #GtkListBoxRow:activatable if a model is set.

# CSS nodes

#HdyComboRow has a main CSS node with name row.

Its popover has the node name popover with the .combo style class, it
contains a #GtkScrolledWindow, which in turn contains a #GtkListBox, both are
accessible via their regular nodes.

A checkmark of node and style class image.checkmark in the popover denotes
the current item.</doc>
    </docsection>
    <docsection name="hdy-deck">
      <doc xml:space="preserve"
           filename="../src/hdy-deck.c"
           line="15">The #HdyDeck widget displays one of the visible children, similar to a
#GtkStack. The children are strictly ordered and can be navigated using
swipe gestures.

The “over” and “under” stack the children one on top of the other, while the
“slide” transition puts the children side by side. While navigating to a
child on the side or below can be performed by swiping the current child
away, navigating to an upper child requires dragging it from the edge where
it resides. This doesn't affect non-dragging swipes.

The “over” and “under” transitions can draw their shadow on top of the
window's transparent areas, like the rounded corners. This is a side-effect
of allowing shadows to be drawn on top of OpenGL areas. It can be mitigated
by using #HdyWindow or #HdyApplicationWindow as they will crop anything drawn
beyond the rounded corners.

# CSS nodes

#HdyDeck has a single CSS node with name deck.</doc>
    </docsection>
    <docsection name="hdy-enum-value-object">
      <doc xml:space="preserve"
           filename="../src/hdy-enum-value-object.c"
           line="11">The #HdyEnumValueObject object represents a #GEnumValue, allowing it to be
used with #GListModel.</doc>
    </docsection>
    <docsection name="hdy-expander-row">
      <doc xml:space="preserve"
           filename="../src/hdy-expander-row.c"
           line="13">The #HdyExpanderRow allows the user to reveal or hide widgets below it. It
also allows the user to enable the expansion of the row, allowing to disable
all that the row contains.

It also supports adding a child as an action widget by specifying “action” as
the “type” attribute of a &amp;lt;child&amp;gt; element. It also supports setting a
child as a prefix widget by specifying “prefix” as the “type” attribute of a
&amp;lt;child&amp;gt; element.

# CSS nodes

#HdyExpanderRow has a main CSS node with name row, and the .expander style
class. It has the .empty style class when it contains no children.

It contains the subnodes row.header for its main embedded row, list.nested
for the list it can expand, and image.expander-row-arrow for its arrow.

When expanded, #HdyExpanderRow will add the
.checked-expander-row-previous-sibling style class to its previous sibling,
and remove it when retracted.</doc>
    </docsection>
    <docsection name="hdy-flap">
      <doc xml:space="preserve"
           filename="../src/hdy-flap.c"
           line="19">The #HdyFlap widget can display its children like a #GtkBox does or like a
#GtkOverlay does, according to the #HdyFlap:fold-policy value.

#HdyFlap has at most three children: #HdyFlap:content, #HdyFlap:flap and
#HdyFlap:separator. Content is the primary child, flap is displayed next to
it when unfolded, or overlays it when folded. Flap can be shown or hidden by
changing the #HdyFlap:reveal-flap value, as well as via swipe gestures if
#HdyFlap:swipe-to-open and/or #HdyFlap:swipe-to-close are set to %TRUE.

Optionally, a separator can be provided, which would be displayed between
the content and the flap when there's no shadow to separate them, depending
on the transition type.

#HdyFlap:flap is transparent by default; add the .background style class to
it if this is unwanted.

If #HdyFlap:modal is set to %TRUE, content becomes completely inaccessible
when the flap is revealed when folded.

The position of the flap and separator children relative to the content is
determined by orientation, as well as  #HdyFlap:flap-position value.

Folding the flap will automatically hide the flap widget, and unfolding it
will automatically reveal it. If this behavior is not desired, the
#HdyFlap:locked property can be used to override it.

Common use cases include sidebars, header bars that need to be able to
overlap the window content (for example, in fullscreen mode) and bottom
sheets.

# HdyFlap as GtkBuildable

The #HdyFlap implementation of the #GtkBuildable interface supports setting
the flap child by specifying “flap” as the “type” attribute of a
&amp;lt;child&amp;gt; element, and separator by specifying “separator”. Specifying
“content” child type or omitting it results in setting the content child.

# CSS nodes

#HdyFlap has a single CSS node with name flap. The node will get the style
classes .folded when it is folded, and .unfolded when it's not.</doc>
    </docsection>
    <docsection name="hdy-header-bar">
      <doc xml:space="preserve"
           filename="../src/hdy-header-bar.c"
           line="35">HdyHeaderBar is similar to #GtkHeaderBar but is designed to fix some of its
shortcomings for adaptive applications.

HdyHeaderBar doesn't force the custom title widget to be vertically centered,
hence allowing it to fill up the whole height, which is e.g. needed for
#HdyViewSwitcher.

When used in a mobile dialog, HdyHeaderBar will replace its window
decorations by a back button allowing to close it. It doesn't have to be its
direct child and you can use any complex contraption you like as the dialog's
titlebar.

#HdyHeaderBar can be used in window's content area rather than titlebar, and
will still be draggable and will handle right click, middle click and double
click as expected from a titlebar. This is particularly useful with
#HdyWindow or #HdyApplicationWindow.

# CSS nodes

#HdyHeaderBar has a single CSS node with name headerbar.</doc>
    </docsection>
    <docsection name="hdy-header-group">
      <doc xml:space="preserve"
           filename="../src/hdy-header-group.c"
           line="12">The #HdyHeaderGroup object handles the header bars of a composite title bar.
It splits the window decoration across the header bars, giving the left side
of the decorations to the leftmost header bar, and the right side of the
decorations to the rightmost header bar.
See hdy_header_bar_set_decoration_layout().

The #HdyHeaderGroup:decorate-all property can be used in conjunction with
#HdyLeaflet:folded when the title bar is split across the pages of a
#HdyLeaflet to automatically display the decorations on all the pages when
the leaflet is folded.

You can nest header groups, which is convenient when you nest leaflets too:
|[
&lt;object class="HdyHeaderGroup" id="inner_header_group"&gt;
  &lt;property name="decorate-all" bind-source="inner_leaflet" bind-property="folded" bind-flags="sync-create"/&gt;
  &lt;headerbars&gt;
    &lt;headerbar name="inner_header_bar_1"/&gt;
    &lt;headerbar name="inner_header_bar_2"/&gt;
  &lt;/headerbars&gt;
&lt;/object&gt;
&lt;object class="HdyHeaderGroup" id="outer_header_group"&gt;
  &lt;property name="decorate-all" bind-source="outer_leaflet" bind-property="folded" bind-flags="sync-create"/&gt;
  &lt;headerbars&gt;
    &lt;headerbar name="inner_header_group"/&gt;
    &lt;headerbar name="outer_header_bar"/&gt;
  &lt;/headerbars&gt;
&lt;/object&gt;
]|</doc>
    </docsection>
    <docsection name="hdy-keypad">
      <doc xml:space="preserve"
           filename="../src/hdy-keypad.c"
           line="13">The #HdyKeypad widget is a keypad for entering numbers such as phone numbers
or PIN codes.

# CSS nodes

#HdyKeypad has a single CSS node with name keypad.</doc>
    </docsection>
    <docsection name="hdy-leaflet">
      <doc xml:space="preserve"
           filename="../src/hdy-leaflet.c"
           line="15">The #HdyLeaflet widget can display its children like a #GtkBox does or
like a #GtkStack does, adapting to size changes by switching between
the two modes.

When there is enough space the children are displayed side by side, otherwise
only one is displayed and the leaflet is said to be “folded”.
The threshold is dictated by the preferred minimum sizes of the children.
When a leaflet is folded, the children can be navigated using swipe gestures.

The “over” and “under” stack the children one on top of the other, while the
“slide” transition puts the children side by side. While navigating to a
child on the side or below can be performed by swiping the current child
away, navigating to an upper child requires dragging it from the edge where
it resides. This doesn't affect non-dragging swipes.

The “over” and “under” transitions can draw their shadow on top of the
window's transparent areas, like the rounded corners. This is a side-effect
of allowing shadows to be drawn on top of OpenGL areas. It can be mitigated
by using #HdyWindow or #HdyApplicationWindow as they will crop anything drawn
beyond the rounded corners.

# CSS nodes

#HdyLeaflet has a single CSS node with name leaflet. The node will get the
style classes .folded when it is folded, .unfolded when it's not, or none if
it didn't compute its fold yet.</doc>
    </docsection>
    <docsection name="hdy-main">
      <doc xml:space="preserve"
           filename="../src/hdy-main.c"
           line="14">Before using the Handy library you should initialize it by calling the
hdy_init() function.
This makes sure translations, types, themes, and icons for the Handy library
are set up properly.</doc>
    </docsection>
    <docsection name="hdy-preferences-group">
      <doc xml:space="preserve"
           filename="../src/hdy-preferences-group.c"
           line="15">A #HdyPreferencesGroup represents a group or tightly related preferences,
which in turn are represented by HdyPreferencesRow.

To summarize the role of the preferences it gathers, a group can have both a
title and a description. The title will be used by #HdyPreferencesWindow to
let the user look for a preference.

# CSS nodes

#HdyPreferencesGroup has a single CSS node with name preferencesgroup.</doc>
    </docsection>
    <docsection name="hdy-preferences-page">
      <doc xml:space="preserve"
           filename="../src/hdy-preferences-page.c"
           line="14">The #HdyPreferencesPage widget gathers preferences groups into a single page
of a preferences window.

# CSS nodes

#HdyPreferencesPage has a single CSS node with name preferencespage.</doc>
    </docsection>
    <docsection name="hdy-preferences-row">
      <doc xml:space="preserve"
           filename="../src/hdy-preferences-row.c"
           line="12">The #HdyPreferencesRow widget has a title that #HdyPreferencesWindow will use
to let the user look for a preference. It doesn't present the title in any
way and it lets you present the preference as you please.

#HdyActionRow and its derivatives are convenient to use as preference rows as
they take care of presenting the preference's title while letting you compose
the inputs of the preference around it.</doc>
    </docsection>
    <docsection name="hdy-preferences-window">
      <doc xml:space="preserve"
           filename="../src/hdy-preferences-window.c"
           line="21">The #HdyPreferencesWindow widget presents an application's preferences
gathered into pages and groups. The preferences are searchable by the user.

# CSS nodes

#HdyPreferencesWindow has a main CSS node with the name window and the style
class .preferences.</doc>
    </docsection>
    <docsection name="hdy-search-bar">
      <doc xml:space="preserve"
           filename="../src/hdy-search-bar.c"
           line="49">#HdySearchBar is a container made to have a search entry (possibly
with additional connex widgets, such as drop-down menus, or buttons)
built-in. The search bar would appear when a search is started through
typing on the keyboard, or the application’s search mode is toggled on.

For keyboard presses to start a search, events will need to be
forwarded from the top-level window that contains the search bar.
See hdy_search_bar_handle_event() for example code. Common shortcuts
such as Ctrl+F should be handled as an application action, or through
the menu items.

You will also need to tell the search bar about which entry you
are using as your search entry using hdy_search_bar_connect_entry().
The following example shows you how to create a more complex search
entry.

HdySearchBar is very similar to #GtkSearchBar, the main difference being that
it allows the search entry to fill all the available space. This allows you
to control your search entry's width with a #HdyClamp.

# CSS nodes

#HdySearchBar has a single CSS node with name searchbar.</doc>
    </docsection>
    <docsection name="hdy-squeezer">
      <doc xml:space="preserve"
           filename="../src/hdy-squeezer.c"
           line="27">The HdySqueezer widget is a container which only shows the first of its
children that fits in the available size. It is convenient to offer different
widgets to represent the same data with different levels of detail, making
the widget seem to squeeze itself to fit in the available space.

Transitions between children can be animated as fades. This can be controlled
with hdy_squeezer_set_transition_type().

# CSS nodes

#HdySqueezer has a single CSS node with name squeezer.</doc>
    </docsection>
    <docsection name="hdy-status-page">
      <doc xml:space="preserve"
           filename="../src/hdy-status-page.c"
           line="12">The #HdyStatusPage widget can have an icon, a title, a description and a
custom widget which is displayed below them.

# CSS nodes

#HdyStatusPage has a main CSS node with name statuspage.</doc>
    </docsection>
    <docsection name="hdy-style-manager">
      <doc xml:space="preserve"
           filename="../src/hdy-style-manager.c"
           line="36">#HdyStyleManager provides a way to query and influence the application styles
such as whether to use dark or high contrast appearance.

It allows to set the color scheme via the #HdyStyleManager:color-scheme
property, and to query the current appearance, as well as whether a
system-wide color scheme preference exists.

Important: #GtkSettings:gtk-application-prefer-dark-theme should
not be used together with `HdyStyleManager` and will result in a warning.
Color schemes should be used instead.</doc>
    </docsection>
    <docsection name="hdy-swipe-group">
      <doc xml:space="preserve"
           filename="../src/hdy-swipe-group.c"
           line="21">The #HdySwipeGroup object can be used to sync multiple swipeable widgets
that implement the #HdySwipeable interface, such as #HdyCarousel, so that
animating one of them also animates all the other widgets in the group.

This can be useful for syncing widgets between a window's titlebar and
content area.

# #HdySwipeGroup as #GtkBuildable

#HdySwipeGroup can be created in an UI definition. The list of swipeable
widgets is specified with a &amp;lt;swipeables&amp;gt; element containing multiple
&amp;lt;swipeable&amp;gt; elements with their ”name” attribute specifying the id of
the widgets.

|[
&lt;object class="HdySwipeGroup"&gt;
  &lt;swipeables&gt;
    &lt;swipeable name="carousel1"/&gt;
    &lt;swipeable name="carousel2"/&gt;
  &lt;/swipeables&gt;
&lt;/object&gt;
]|

#HdySwipeGroup has been deprecated, #HdyWindow and #HdyApplicationWindow
allow using a single leaflet for both content and header bar, without the
need to sync them.</doc>
    </docsection>
    <docsection name="hdy-swipe-tracker">
      <doc xml:space="preserve"
           filename="../src/hdy-swipe-tracker.c"
           line="34">The HdySwipeTracker object can be used for implementing widgets with swipe
gestures. It supports touch-based swipes, pointer dragging, and touchpad
scrolling.

The widgets will probably want to expose #HdySwipeTracker:enabled property.
If they expect to use horizontal orientation, #HdySwipeTracker:reversed
property can be used for supporting RTL text direction.</doc>
    </docsection>
    <docsection name="hdy-swipeable">
      <doc xml:space="preserve"
           filename="../src/hdy-swipeable.c"
           line="11">The #HdySwipeable interface is implemented by all swipeable widgets. They
can be synced using #HdySwipeGroup.

See #HdySwipeTracker for details about implementing it.</doc>
    </docsection>
    <docsection name="hdy-tab-bar">
      <doc xml:space="preserve"
           filename="../src/hdy-tab-bar.c"
           line="15">The #HdyTabBar widget is a tab bar that can be used with conjunction with
#HdyTabView.

#HdyTabBar can autohide and can optionally contain action widgets on both
sides of the tabs.

When there's not enough space to show all the tabs, #HdyTabBar will scroll
them. Pinned tabs always stay visible and aren't a part of the scrollable
area.

# CSS nodes

#HdyTabBar has a single CSS node with name tabbar.</doc>
    </docsection>
    <docsection name="hdy-tab-view">
      <doc xml:space="preserve"
           filename="../src/hdy-tab-view.c"
           line="21">#HdyTabView is a container which shows one child at a time. While it provides
keyboard shortcuts for switching between pages, it does not provide a visible
tab bar and relies on external widgets for that, such as #HdyTabBar.

#HdyTabView maintains a #HdyTabPage object for each page,which holds
additional per-page properties. You can obtain the #HdyTabPage for a page
with hdy_tab_view_get_page(), and as return value for hdy_tab_view_append()
and other functions for adding children.

#HdyTabView only aims to be useful for dynamic tabs in multi-window
document-based applications, such as web browsers, file managers, text
editors or terminals. It does not aim to replace #GtkNotebook for use cases
such as tabbed dialogs.

As such, it does not support disabling page reordering or detaching, or
adding children via #GtkBuilder.

# CSS nodes

#HdyTabView has a main CSS node with the name tabview.

It contains the subnode overlay, which contains subnodes stack and widget.
The stack subnode contains the added pages.

|[&lt;!-- language="plain" --&gt;
tabview
╰── overlay
    ├── stack
    │   ╰── [ Children ]
    ╰── widget
]|</doc>
    </docsection>
    <docsection name="hdy-title-bar">
      <doc xml:space="preserve"
           filename="../src/hdy-title-bar.c"
           line="14">HdyTitleBar is meant to be used as the top-level widget of your window's
title bar. It will be drawn with the same style as a GtkHeaderBar but it
won't force a widget layout on you: you can put whatever widget you want in
it, including a GtkHeaderBar.

HdyTitleBar becomes really useful when you want to animate header bars, like
an adaptive application using #HdyLeaflet would do.

#HdyTitleBar has been deprecated, header bars can be animated without it
when placed inside #HdyWindow or #HdyApplicationWindow.

# CSS nodes

#HdyTitleBar has a single CSS node with name headerbar.</doc>
    </docsection>
    <docsection name="hdy-value-object">
      <doc xml:space="preserve"
           filename="../src/hdy-value-object.c"
           line="12">The #HdyValueObject object represents a #GValue, allowing it to be
used with #GListModel.</doc>
    </docsection>
    <docsection name="hdy-view-switcher">
      <doc xml:space="preserve"
           filename="../src/hdy-view-switcher.c"
           line="19">An adaptive view switcher, designed to switch between multiple views in a
similar fashion than a #GtkStackSwitcher.

Depending on the available width, the view switcher can adapt from a wide
mode showing the view's icon and title side by side, to a narrow mode showing
the view's icon and title one on top of the other, in a more compact way.
This can be controlled via the policy property.

To look good in a header bar, an #HdyViewSwitcher requires to fill its full
height. Contrary to #GtkHeaderBar, #HdyHeaderBar doesn't force a vertical
alignment on its title widget, so we recommend it over #GtkHeaderBar.

# CSS nodes

#HdyViewSwitcher has a single CSS node with name viewswitcher.</doc>
    </docsection>
    <docsection name="hdy-view-switcher-bar">
      <doc xml:space="preserve"
           filename="../src/hdy-view-switcher-bar.c"
           line="14">An action bar letting you switch between multiple views offered by a
#GtkStack, via an #HdyViewSwitcher. It is designed to be put at the bottom of
a window and to be revealed only on really narrow windows e.g. on mobile
phones. It can't be revealed if there are less than two pages.

You can conveniently bind the #HdyViewSwitcherBar:reveal property to
#HdyViewSwitcherTitle:title-visible to automatically reveal the view switcher
bar when the title label is displayed in place of the view switcher.

An example of the UI definition for a common use case:
|[
&lt;object class="GtkWindow"/&gt;
  &lt;child type="titlebar"&gt;
    &lt;object class="HdyHeaderBar"&gt;
      &lt;property name="centering-policy"&gt;strict&lt;/property&gt;
      &lt;child type="title"&gt;
        &lt;object class="HdyViewSwitcherTitle"
                id="view_switcher_title"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
        &lt;/object&gt;
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/child&gt;
  &lt;child&gt;
    &lt;object class="GtkBox"&gt;
      &lt;child&gt;
        &lt;object class="GtkStack" id="stack"/&gt;
      &lt;/child&gt;
      &lt;child&gt;
        &lt;object class="HdyViewSwitcherBar"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
          &lt;property name="reveal"
                    bind-source="view_switcher_title"
                    bind-property="title-visible"
                    bind-flags="sync-create"/&gt;
        &lt;/object&gt;
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/child&gt;
&lt;/object&gt;
]|

# CSS nodes

#HdyViewSwitcherBar has a single CSS node with name viewswitcherbar.</doc>
    </docsection>
    <docsection name="hdy-view-switcher-title">
      <doc xml:space="preserve"
           filename="../src/hdy-view-switcher-title.c"
           line="14">A widget letting you switch between multiple views offered by a #GtkStack,
via an #HdyViewSwitcher. It is designed to be used as the title widget of a
#HdyHeaderBar, and will display the window's title when the window is too
narrow to fit the view switcher e.g. on mobile phones, or if there are less
than two views.

You can conveniently bind the #HdyViewSwitcherBar:reveal property to
#HdyViewSwitcherTitle:title-visible to automatically reveal the view switcher
bar when the title label is displayed in place of the view switcher.

An example of the UI definition for a common use case:
|[
&lt;object class="GtkWindow"/&gt;
  &lt;child type="titlebar"&gt;
    &lt;object class="HdyHeaderBar"&gt;
      &lt;property name="centering-policy"&gt;strict&lt;/property&gt;
      &lt;child type="title"&gt;
        &lt;object class="HdyViewSwitcherTitle"
                id="view_switcher_title"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
        &lt;/object&gt;
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/child&gt;
  &lt;child&gt;
    &lt;object class="GtkBox"&gt;
      &lt;child&gt;
        &lt;object class="GtkStack" id="stack"/&gt;
      &lt;/child&gt;
      &lt;child&gt;
        &lt;object class="HdyViewSwitcherBar"&gt;
          &lt;property name="stack"&gt;stack&lt;/property&gt;
          &lt;property name="reveal"
                    bind-source="view_switcher_title"
                    bind-property="title-visible"
                    bind-flags="sync-create"/&gt;
        &lt;/object&gt;
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/child&gt;
&lt;/object&gt;
]|

# CSS nodes

#HdyViewSwitcherTitle has a single CSS node with name viewswitchertitle.</doc>
    </docsection>
    <docsection name="hdy-window">
      <doc xml:space="preserve"
           filename="../src/hdy-window.c"
           line="12">The HdyWindow widget is a subclass of #GtkWindow which has no titlebar area
and provides rounded corners on all sides, ensuring they can never be
overlapped by the content. This makes it safe to use headerbars in the
content area as follows:

|[
&lt;object class="HdyWindow"/&gt;
  &lt;child&gt;
    &lt;object class="GtkBox"&gt;
      &lt;property name="visible"&gt;True&lt;/property&gt;
      &lt;property name="orientation"&gt;vertical&lt;/property&gt;
      &lt;child&gt;
        &lt;object class="HdyHeaderBar"&gt;
          &lt;property name="visible"&gt;True&lt;/property&gt;
          &lt;property name="show-close-button"&gt;True&lt;/property&gt;
        &lt;/object&gt;
      &lt;/child&gt;
      &lt;child&gt;
        ...
      &lt;/child&gt;
    &lt;/object&gt;
  &lt;/child&gt;
&lt;/object&gt;
]|

It's recommended to use #HdyHeaderBar with #HdyWindow, as unlike
#GtkHeaderBar it remains draggable inside the window. Otherwise,
#HdyWindowHandle can be used.

#HdyWindow allows to easily implement titlebar autohiding by putting the
headerbar inside a #GtkRevealer, and to show titlebar above content by
putting it into a #GtkOverlay instead of #GtkBox.

if the window has a #GtkGLArea, it may bring a slight performance regression
when the window is not fullscreen, tiled or maximized.

Using gtk_window_get_titlebar() and gtk_window_set_titlebar() is not
supported and will result in a crash.

# CSS nodes

#HdyWindow has a main CSS node with the name window and style classes
.background, .csd and .unified.

The .solid-csd style class on the main node is used for client-side
decorations without invisible borders.

#HdyWindow also represents window states with the following
style classes on the main node: .tiled, .maximized, .fullscreen.

It contains the subnodes decoration for window shadow and/or border,
decoration-overlay for the sheen on top of the window, widget.titlebar, and
deck, which contains the child inside the window.</doc>
    </docsection>
    <docsection name="hdy-window-handle">
      <doc xml:space="preserve"
           filename="../src/hdy-window-handle.c"
           line="12">HdyWindowHandle is a #GtkBin subclass that can be dragged to move its
#GtkWindow, and handles right click, middle click and double click as
expected from a titlebar. This is particularly useful with #HdyWindow or
#HdyApplicationWindow.

It isn't necessary to use #HdyWindowHandle if you use #HdyHeaderBar.

It can be safely nested or used in the actual window titlebar.

# CSS nodes

#HdyWindowHandle has a single CSS node with name windowhandle.</doc>
    </docsection>
    <function name="init" c:identifier="hdy_init">
      <doc xml:space="preserve"
           filename="../src/hdy-main.c"
           line="176">Call this function just after initializing GTK, if you are using
#GtkApplication it means it must be called when the #GApplication::startup
signal is emitted. If libhandy has already been initialized, the function
will simply return.

This makes sure translations, types, themes, and icons for the Handy library
are set up properly.</doc>
      <source-position filename="../src/hdy-main.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
